// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------------

package com.microsoft.recognizers.text.number.resources;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.common.collect.ImmutableMap;

public class SwedishNumeric {

    public static final String LangMarker = "Swe";

    public static final Boolean CompoundNumberLanguage = true;

    public static final Boolean MultiDecimalSeparatorCulture = true;

    public static final String RoundNumberIntegerRegex = "(hundra|tusen|miljon(er)?|miljard(er)?|biljon(er)?|biljard(er)?|triljon(er)?)";

    public static final String ZeroToNineIntegerRegex = "(tre|sju|åtta|fyra|fem|noll|nio|ett|en|två|sex)";

    public static final String TwoToNineIntegerRegex = "(tre|sju|åtta|fyra|fem|nio|två|sex)";

    public static final String NegativeNumberTermsRegex = "(?<negTerm>((minus|negativ(t)?)\\s+))";

    public static final String NegativeNumberSignRegex = "^({NegativeNumberTermsRegex}).*"
            .replace("{NegativeNumberTermsRegex}", NegativeNumberTermsRegex);

    public static final String AnIntRegex = "(e(n|tt))(?=\\s)";

    public static final String TenToNineteenIntegerRegex = "(sjutton|tretton|fjorton|arton|nitton|femton|sexton|elva|tolv|tio)";

    public static final String TensNumberIntegerRegex = "(sjuttio|tjugo|trettio|åttio|nittio|fyrtio|femtio|sextio)";

    public static final String SeparaIntRegex = "((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\\s+(och\\s+)?|\\s*-\\s*)?{ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex})(\\s*{RoundNumberIntegerRegex})*))|(({AnIntRegex}(\\s*{RoundNumberIntegerRegex})+))"
            .replace("{TenToNineteenIntegerRegex}", TenToNineteenIntegerRegex)
            .replace("{TensNumberIntegerRegex}", TensNumberIntegerRegex)
            .replace("{ZeroToNineIntegerRegex}", ZeroToNineIntegerRegex)
            .replace("{RoundNumberIntegerRegex}", RoundNumberIntegerRegex)
            .replace("{AnIntRegex}", AnIntRegex);

    public static final String AllIntRegex = "(((({TenToNineteenIntegerRegex}|({TensNumberIntegerRegex}(\\s+(och\\s+)?|\\s*-\\s*)?{ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|({ZeroToNineIntegerRegex}|{AnIntRegex}))?(\\s*{RoundNumberIntegerRegex})))*{SeparaIntRegex})"
            .replace("{TenToNineteenIntegerRegex}", TenToNineteenIntegerRegex)
            .replace("{TensNumberIntegerRegex}", TensNumberIntegerRegex)
            .replace("{ZeroToNineIntegerRegex}", ZeroToNineIntegerRegex)
            .replace("{AnIntRegex}", AnIntRegex)
            .replace("{RoundNumberIntegerRegex}", RoundNumberIntegerRegex)
            .replace("{SeparaIntRegex}", SeparaIntRegex);

    public static final String PlaceHolderPureNumber = "\\b";

    public static final String PlaceHolderDefault = "\\D|\\b";

    public static String NumbersWithPlaceHolder(String placeholder) {
        return "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+(?!([\\.,]\\d+[a-zA-Z]))(?={placeholder})"
            .replace("{placeholder}", placeholder);
    }

    public static final String NumbersWithSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)"
            .replace("{BaseNumbers.NumberMultiplierRegex}", BaseNumbers.NumberMultiplierRegex);

    public static final String RoundNumberIntegerRegexWithLocks = "(?<=\\b)\\d+\\s*{RoundNumberIntegerRegex}(?=\\b)"
            .replace("{RoundNumberIntegerRegex}", RoundNumberIntegerRegex);

    public static final String NumbersWithDozenSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dussin(?=\\b)";

    public static final String AllIntRegexWithLocks = "((?<=\\b){AllIntRegex}(?=\\b))"
            .replace("{AllIntRegex}", AllIntRegex);

    public static final String AllIntRegexWithDozenSuffixLocks = "(?<=\\b)(((ett\\s+)?halvt\\s+dussin)|({AllIntRegex}\\s+dussin))(?=\\b)"
            .replace("{AllIntRegex}", AllIntRegex);

    public static final String RoundNumberOrdinalRegex = "(hundrade|tusende|miljonte|miljardte|biljonte|biljardte|triljonte|triljardte)";

    public static final String NumberOrdinalRegex = "(först(e|a)|andr(a|e)|tredje|fjärde|femte|sjätte|sjunde|åttonde|nionde|tionde|elfte|tolfte|trettonde|fjortonde|femtonde|sextonde|sjuttonde|artonde|nittonde|tjugonde|trettionde|fyrtionde|femtionde|sextionde|sjuttionde|åttionde|nittionde)";

    public static final String RelativeOrdinalRegex = "(?<relativeOrdinal>(\\bnäst(a|e)|\\bföregående|\\bnäst\\s+sist(a|e)|\\bsist(a|e)|\\bnuvarande|\\b(före|efter)\\s+nuvarande|\\bförr(a|e)|\\btredje\\s+från\\s+slutet|\\bsenaste|\\btidigare|\\bföre\\s+den\\s+sist(a|e)|\\b(innan|efter|före)\\s+sist(a|e)))";

    public static final String SuffixBasicOrdinalRegex = "((((({TensNumberIntegerRegex}(\\s+(och\\s+)?|\\s*-?\\s*){ZeroToNineIntegerRegex})|{TensNumberIntegerRegex}|{ZeroToNineIntegerRegex}?|{AnIntRegex})(\\s*{RoundNumberIntegerRegex})+)\\s*(och\\s+)?)*({TensNumberIntegerRegex}(\\s+|\\s*-?\\s*))?{NumberOrdinalRegex})"
            .replace("{TensNumberIntegerRegex}", TensNumberIntegerRegex)
            .replace("{ZeroToNineIntegerRegex}", ZeroToNineIntegerRegex)
            .replace("{AnIntRegex}", AnIntRegex)
            .replace("{RoundNumberIntegerRegex}", RoundNumberIntegerRegex)
            .replace("{NumberOrdinalRegex}", NumberOrdinalRegex);

    public static final String SuffixRoundNumberOrdinalRegex = "(({AllIntRegex}\\s*){RoundNumberOrdinalRegex})"
            .replace("{AllIntRegex}", AllIntRegex)
            .replace("{RoundNumberOrdinalRegex}", RoundNumberOrdinalRegex);

    public static final String AllOrdinalNumberRegex = "({SuffixRoundNumberOrdinalRegex}|{SuffixBasicOrdinalRegex})"
            .replace("{SuffixRoundNumberOrdinalRegex}", SuffixRoundNumberOrdinalRegex)
            .replace("{SuffixBasicOrdinalRegex}", SuffixBasicOrdinalRegex);

    public static final String AllOrdinalRegex = "({RelativeOrdinalRegex}|{AllOrdinalNumberRegex})"
            .replace("{RelativeOrdinalRegex}", RelativeOrdinalRegex)
            .replace("{AllOrdinalNumberRegex}", AllOrdinalNumberRegex);

    public static final String OrdinalSuffixRegex = "(?<=\\b)(?:(\\d*(1:(e|a)|2:(a|e)|3:e|4:e|5:e|6:e|7:e|8:e|9:e|0:e))|(11:e|12:e))(?=\\b)";

    public static final String OrdinalNumericRegex = "(?<=\\b)(?:\\d{1,3}(\\s*,\\s*\\d{3})*\\s*(:(e|a)))(?=\\b)";

    public static final String OrdinalRoundNumberRegex = "(?<!(en|ett)\\s+)?{RoundNumberOrdinalRegex}"
            .replace("{RoundNumberOrdinalRegex}", RoundNumberOrdinalRegex);

    public static final String OrdinalSwedishRegex = "(?<=\\b){AllOrdinalRegex}(?=\\b)"
            .replace("{AllOrdinalRegex}", AllOrdinalRegex);

    public static final String RoundNumberFractionSwedishRegex = "(hundradel(s|ar)?|tusendel(s|ar)?|miljon(te)?del(s|ar)?|miljarddel(s|ar)?|biljon(te)?del(s|ar)?|biljarddel(s|ar)?|triljon(te)?del(s|ar)?|triljarddel(s|ar)?)";

    public static final String FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";

    public static final String FractionNotationRegex = "{BaseNumbers.FractionNotationRegex}"
            .replace("{BaseNumbers.FractionNotationRegex}", BaseNumbers.FractionNotationRegex);

    public static final String FractionNounRegex = "(?<=\\b)({AllIntRegex}\\s+(och\\s+)?)?({AllIntRegex})(\\s*|\\s*-\\s*)((({AllOrdinalNumberRegex})|({RoundNumberFractionSwedishRegex}))((de)?l(s|ar(na)?)?)?|halvor|kvart(ar|s))(?=\\b)"
            .replace("{AllIntRegex}", AllIntRegex)
            .replace("{AllOrdinalNumberRegex}", AllOrdinalNumberRegex)
            .replace("{RoundNumberFractionSwedishRegex}", RoundNumberFractionSwedishRegex);

    public static final String FractionNounWithArticleRegex = "(?<=\\b)((({AllIntRegex}\\s+(och\\s+)?)?(en|ett)?(\\s+|\\s*-\\s*)(?!\\bförsta\\b|\\bandra\\b)(({AllOrdinalNumberRegex})|({RoundNumberFractionSwedishRegex})|halv(t)?|kvart(s)?))|(halva|hälften))(?=\\b)"
            .replace("{AllIntRegex}", AllIntRegex)
            .replace("{AllOrdinalNumberRegex}", AllOrdinalNumberRegex)
            .replace("{RoundNumberFractionSwedishRegex}", RoundNumberFractionSwedishRegex);

    public static final String FractionOverRegex = "(genom|delat\\s+(med|på)|delad\\s+(med|på)|dividerat\\s+(med|på)|dividerad\\s+(med|på)|(ut)?av|på)";

    public static final String FractionPrepositionRegex = "(?<!{BaseNumbers.CommonCurrencySymbol}\\s*)(?<=\\b)(?<numerator>({AllIntRegex})|((?<![\\.,])\\d+))\\s+{FractionOverRegex}\\s+(?<denominator>({AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)"
            .replace("{AllIntRegex}", AllIntRegex)
            .replace("{BaseNumbers.CommonCurrencySymbol}", BaseNumbers.CommonCurrencySymbol)
            .replace("{FractionOverRegex}", FractionOverRegex);

    public static final String FractionPrepositionWithinPercentModeRegex = "(?<!{BaseNumbers.CommonCurrencySymbol}\\s*)(?<=\\b)(?<numerator>({AllIntRegex})|((?<![\\.,])\\d+))\\s+genom\\s+(?<denominator>({AllIntRegex})|(\\d+)(?![\\.,]))(?=\\b)"
            .replace("{AllIntRegex}", AllIntRegex)
            .replace("{BaseNumbers.CommonCurrencySymbol}", BaseNumbers.CommonCurrencySymbol);

    public static final String AllPointRegex = "((\\s+{ZeroToNineIntegerRegex})+|(\\s+{SeparaIntRegex}))"
            .replace("{ZeroToNineIntegerRegex}", ZeroToNineIntegerRegex)
            .replace("{SeparaIntRegex}", SeparaIntRegex);

    public static final String AllFloatRegex = "{AllIntRegex}(\\s+komma){AllPointRegex}"
            .replace("{AllIntRegex}", AllIntRegex)
            .replace("{AllPointRegex}", AllPointRegex);

    public static final String DoubleWithMultiplierRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+\\s*{BaseNumbers.NumberMultiplierRegex}(?=\\b)"
            .replace("{BaseNumbers.NumberMultiplierRegex}", BaseNumbers.NumberMultiplierRegex);

    public static final String DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";

    public static final String DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";

    public static String DoubleDecimalPointRegex(String placeholder) {
        return "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+(?!([\\.,]\\d+))(?={placeholder})"
            .replace("{placeholder}", placeholder);
    }

    public static String DoubleWithoutIntegralRegex(String placeholder) {
        return "(?<=\\s|^)(?<!(\\d+))[\\.,]\\d+(?!([\\.,]\\d+))(?={placeholder})"
            .replace("{placeholder}", placeholder);
    }

    public static final String DoubleWithRoundNumber = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))\\d+[\\.,]\\d+\\s+{RoundNumberIntegerRegex}(?=\\b)"
            .replace("{RoundNumberIntegerRegex}", RoundNumberIntegerRegex);

    public static final String DoubleAllFloatRegex = "((?<=\\b){AllFloatRegex}(?=\\b))"
            .replace("{AllFloatRegex}", AllFloatRegex);

    public static final String ConnectorRegex = "(?<spacer>och)";

    public static final String NumberWithSuffixPercentage = "(?<!%)({BaseNumbers.NumberReplaceToken})(\\s*)(%(?!{BaseNumbers.NumberReplaceToken})|(procent|procentenheter)\\b)"
            .replace("{BaseNumbers.NumberReplaceToken}", BaseNumbers.NumberReplaceToken);

    public static final String FractionNumberWithSuffixPercentage = "(({BaseNumbers.FractionNumberReplaceToken})\\s+av)"
            .replace("{BaseNumbers.FractionNumberReplaceToken}", BaseNumbers.FractionNumberReplaceToken);

    public static final String NumberWithPrefixPercentage = "(procent\\s+av)(\\s*)({BaseNumbers.NumberReplaceToken})"
            .replace("{BaseNumbers.NumberReplaceToken}", BaseNumbers.NumberReplaceToken);

    public static final String NumberWithPrepositionPercentage = "({BaseNumbers.NumberReplaceToken})\\s*(ut\\s+av)\\s*({BaseNumbers.NumberReplaceToken})"
            .replace("{BaseNumbers.NumberReplaceToken}", BaseNumbers.NumberReplaceToken);

    public static final String TillRegex = "(to|through|--|-|—|——|~|–)";

    public static final String MoreRegex = "(?:(bigger|greater|more|higher|larger)(\\s+than)?|above|over|exceed(ed|ing)?|surpass(ed|ing)?|(?<!<|=)>)";

    public static final String LessRegex = "(?:(less|lower|smaller|fewer)(\\s+than)?|below|under|(?<!>|=)<)";

    public static final String EqualRegex = "(equal(s|ing)?(\\s+(to|than))?|(?<!<|>)=)";

    public static final String MoreOrEqualPrefix = "((no\\s+{LessRegex})|(at\\s+least))"
            .replace("{LessRegex}", LessRegex);

    public static final String MoreOrEqual = "(?:({MoreRegex}\\s+(or)?\\s+{EqualRegex})|({EqualRegex}\\s+(or)?\\s+{MoreRegex})|{MoreOrEqualPrefix}(\\s+(or)?\\s+{EqualRegex})?|({EqualRegex}\\s+(or)?\\s+)?{MoreOrEqualPrefix}|>\\s*=)"
            .replace("{MoreRegex}", MoreRegex)
            .replace("{EqualRegex}", EqualRegex)
            .replace("{LessRegex}", LessRegex)
            .replace("{MoreOrEqualPrefix}", MoreOrEqualPrefix);

    public static final String MoreOrEqualSuffix = "((and|or)\\s+(((more|greater|higher|larger|bigger)((?!\\s+than)|(\\s+than(?!(\\s*\\d+)))))|((over|above)(?!\\s+than))))";

    public static final String LessOrEqualPrefix = "((no\\s+{MoreRegex})|(at\\s+most)|(up\\s+to))"
            .replace("{MoreRegex}", MoreRegex);

    public static final String LessOrEqual = "(({LessRegex}\\s+(or)?\\s+{EqualRegex})|({EqualRegex}\\s+(or)?\\s+{LessRegex})|{LessOrEqualPrefix}(\\s+(or)?\\s+{EqualRegex})?|({EqualRegex}\\s+(or)?\\s+)?{LessOrEqualPrefix}|<\\s*=)"
            .replace("{LessRegex}", LessRegex)
            .replace("{EqualRegex}", EqualRegex)
            .replace("{MoreRegex}", MoreRegex)
            .replace("{LessOrEqualPrefix}", LessOrEqualPrefix);

    public static final String LessOrEqualSuffix = "((and|or)\\s+(less|lower|smaller|fewer)((?!\\s+than)|(\\s+than(?!(\\s*\\d+)))))";

    public static final String NumberSplitMark = "(?![,.](?!\\d+))";

    public static final String MoreRegexNoNumberSucceed = "((bigger|greater|more|higher|larger)((?!\\s+than)|\\s+(than(?!(\\s*\\d+))))|(above|over)(?!(\\s*\\d+)))";

    public static final String LessRegexNoNumberSucceed = "((less|lower|smaller|fewer)((?!\\s+than)|\\s+(than(?!(\\s*\\d+))))|(below|under)(?!(\\s*\\d+)))";

    public static final String EqualRegexNoNumberSucceed = "(equal(s|ing)?((?!\\s+(to|than))|(\\s+(to|than)(?!(\\s*\\d+)))))";

    public static final String OneNumberRangeMoreRegex1 = "({MoreOrEqual}|{MoreRegex})\\s*(the\\s+)?(?<number1>({NumberSplitMark}.)+)"
            .replace("{MoreOrEqual}", MoreOrEqual)
            .replace("{MoreRegex}", MoreRegex)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String OneNumberRangeMoreRegex2 = "(?<number1>({NumberSplitMark}.)+)\\s*{MoreOrEqualSuffix}"
            .replace("{MoreOrEqualSuffix}", MoreOrEqualSuffix)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String OneNumberRangeMoreSeparateRegex = "({EqualRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){MoreRegexNoNumberSucceed})|({MoreRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){EqualRegexNoNumberSucceed})"
            .replace("{EqualRegex}", EqualRegex)
            .replace("{MoreRegex}", MoreRegex)
            .replace("{EqualRegexNoNumberSucceed}", EqualRegexNoNumberSucceed)
            .replace("{MoreRegexNoNumberSucceed}", MoreRegexNoNumberSucceed)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String OneNumberRangeLessRegex1 = "({LessOrEqual}|{LessRegex})\\s*(the\\s+)?(?<number2>({NumberSplitMark}.)+)"
            .replace("{LessOrEqual}", LessOrEqual)
            .replace("{LessRegex}", LessRegex)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String OneNumberRangeLessRegex2 = "(?<number2>({NumberSplitMark}.)+)\\s*{LessOrEqualSuffix}"
            .replace("{LessOrEqualSuffix}", LessOrEqualSuffix)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String OneNumberRangeLessSeparateRegex = "({EqualRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){LessRegexNoNumberSucceed})|({LessRegex}\\s+(?<number1>({NumberSplitMark}.)+)(\\s+or\\s+){EqualRegexNoNumberSucceed})"
            .replace("{EqualRegex}", EqualRegex)
            .replace("{LessRegex}", LessRegex)
            .replace("{EqualRegexNoNumberSucceed}", EqualRegexNoNumberSucceed)
            .replace("{LessRegexNoNumberSucceed}", LessRegexNoNumberSucceed)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String OneNumberRangeEqualRegex = "{EqualRegex}\\s*(the\\s+)?(?<number1>({NumberSplitMark}.)+)"
            .replace("{EqualRegex}", EqualRegex)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String TwoNumberRangeRegex1 = "between\\s*(the\\s+)?(?<number1>({NumberSplitMark}.)+)\\s*and\\s*(the\\s+)?(?<number2>({NumberSplitMark}.)+)"
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String TwoNumberRangeRegex2 = "({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})\\s*(and|but|,)\\s*({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})"
            .replace("{OneNumberRangeMoreRegex1}", OneNumberRangeMoreRegex1)
            .replace("{OneNumberRangeMoreRegex2}", OneNumberRangeMoreRegex2)
            .replace("{OneNumberRangeLessRegex1}", OneNumberRangeLessRegex1)
            .replace("{OneNumberRangeLessRegex2}", OneNumberRangeLessRegex2);

    public static final String TwoNumberRangeRegex3 = "({OneNumberRangeLessRegex1}|{OneNumberRangeLessRegex2})\\s*(and|but|,)\\s*({OneNumberRangeMoreRegex1}|{OneNumberRangeMoreRegex2})"
            .replace("{OneNumberRangeMoreRegex1}", OneNumberRangeMoreRegex1)
            .replace("{OneNumberRangeMoreRegex2}", OneNumberRangeMoreRegex2)
            .replace("{OneNumberRangeLessRegex1}", OneNumberRangeLessRegex1)
            .replace("{OneNumberRangeLessRegex2}", OneNumberRangeLessRegex2);

    public static final String TwoNumberRangeRegex4 = "(from\\s+)?(?<number1>({NumberSplitMark}(?!\\bfrom\\b).)+)\\s*{TillRegex}\\s*(the\\s+)?(?<number2>({NumberSplitMark}.)+)"
            .replace("{TillRegex}", TillRegex)
            .replace("{NumberSplitMark}", NumberSplitMark);

    public static final String AmbiguousFractionConnectorsRegex = "^[.]";

    public static final Character DecimalSeparatorChar = ',';

    public static final String FractionMarkerToken = "av";

    public static final Character NonDecimalSeparatorChar = '.';

    public static final String HalfADozenText = "sex";

    public static final String HalfATjogText = "tio";

    public static final String WordSeparatorToken = "och";

    public static final List<String> WrittenDecimalSeparatorTexts = Arrays.asList("komma");

    public static final List<String> WrittenGroupSeparatorTexts = Arrays.asList("punkt");

    public static final List<String> WrittenIntegerSeparatorTexts = Arrays.asList("och");

    public static final List<String> WrittenFractionSeparatorTexts = Arrays.asList("och");

    public static final String HalfADozenRegex = "ett\\s+halvt\\s+dussin";

    public static final String DigitalNumberRegex = "((?<=\\b)(hundra|tusen|miljon|miljoner|miljard|miljarder|biljon|biljoner|triljon|triljoner|biljard|biljarder|dussin|tjog)(?=\\b))|((?<=(\\d|\\b)){BaseNumbers.MultiplierLookupRegex}(?=\\b))"
            .replace("{BaseNumbers.MultiplierLookupRegex}", BaseNumbers.MultiplierLookupRegex);

    public static final ImmutableMap<String, Long> CardinalNumberMap = ImmutableMap.<String, Long>builder()
        .put("ingen", 0L)
        .put("inga", 0L)
        .put("noll", 0L)
        .put("en", 1L)
        .put("ett", 1L)
        .put("två", 2L)
        .put("tre", 3L)
        .put("fyra", 4L)
        .put("fem", 5L)
        .put("sex", 6L)
        .put("sju", 7L)
        .put("åtta", 8L)
        .put("nio", 9L)
        .put("tio", 10L)
        .put("elva", 11L)
        .put("tolv", 12L)
        .put("dussin", 12L)
        .put("dussintal", 12L)
        .put("dussintals", 12L)
        .put("tretton", 13L)
        .put("fjorton", 14L)
        .put("femton", 15L)
        .put("sexton", 16L)
        .put("sjutton", 17L)
        .put("arton", 18L)
        .put("nitton", 19L)
        .put("tjugo", 20L)
        .put("tjog", 20L)
        .put("tjogvis", 20L)
        .put("trettio", 30L)
        .put("tretti", 30L)
        .put("fyrtio", 40L)
        .put("femtio", 50L)
        .put("sextio", 60L)
        .put("sjuttio", 70L)
        .put("åttio", 80L)
        .put("nittio", 90L)
        .put("hundra", 100L)
        .put("tusen", 1000L)
        .put("miljon", 1000000L)
        .put("miljoner", 1000000L)
        .put("miljard", 1000000000L)
        .put("miljarder", 1000000000L)
        .put("biljon", 1000000000000L)
        .put("biljoner", 1000000000000L)
        .put("biljard", 1000000000000000L)
        .put("biljarder", 1000000000000000L)
        .put("triljon", 1000000000000000000L)
        .put("triljoner", 1000000000000000000L)
        .build();

    public static final ImmutableMap<String, Long> OrdinalNumberMap = ImmutableMap.<String, Long>builder()
        .put("första", 1L)
        .put("förste", 1L)
        .put("etta", 1L)
        .put("ettan", 1L)
        .put("andra", 2L)
        .put("andre", 2L)
        .put("sekundära", 2L)
        .put("sekundäre", 2L)
        .put("tvåa", 2L)
        .put("tvåan", 2L)
        .put("halva", 2L)
        .put("halvan", 2L)
        .put("halvt", 2L)
        .put("halv", 2L)
        .put("halvor", 2L)
        .put("hälft", 2L)
        .put("hälften", 2L)
        .put("tredje", 3L)
        .put("tertiära", 3L)
        .put("tertiäre", 3L)
        .put("fjärde", 4L)
        .put("kvart", 4L)
        .put("kvarten", 4L)
        .put("kvarts", 4L)
        .put("femte", 5L)
        .put("sjätte", 6L)
        .put("sjunde", 7L)
        .put("åttonde", 8L)
        .put("nionde", 9L)
        .put("tionde", 10L)
        .put("elfte", 11L)
        .put("tolfte", 12L)
        .put("trettonde", 13L)
        .put("fjortonde", 14L)
        .put("femtonde", 15L)
        .put("sextonde", 16L)
        .put("sjuttonde", 17L)
        .put("artonde", 18L)
        .put("nittonde", 19L)
        .put("tjugonde", 20L)
        .put("trettionde", 30L)
        .put("fyrtionde", 40L)
        .put("femtionde", 50L)
        .put("sextionde", 60L)
        .put("sjuttionde", 70L)
        .put("åttionde", 80L)
        .put("nittionde", 90L)
        .put("hundrade", 100L)
        .put("tusende", 1000L)
        .put("miljonte", 1000000L)
        .put("miljardte", 1000000000L)
        .put("biljonte", 1000000000000L)
        .put("biljardte", 1000000000000000L)
        .put("triljonte", 1000000000000000000L)
        .build();

    public static final ImmutableMap<String, Long> RoundNumberMap = ImmutableMap.<String, Long>builder()
        .put("hundra", 100L)
        .put("tusen", 1000L)
        .put("miljon", 1000000L)
        .put("milj", 1000000L)
        .put("miljoner", 1000000L)
        .put("miljard", 1000000000L)
        .put("miljarder", 1000000000L)
        .put("biljon", 1000000000000L)
        .put("biljoner", 1000000000000L)
        .put("biljard", 1000000000000000L)
        .put("bijarder", 1000000000000000L)
        .put("triljon", 1000000000000000000L)
        .put("triljoner", 1000000000000000000L)
        .put("hundrade", 100L)
        .put("tusende", 1000L)
        .put("miljonte", 1000000L)
        .put("miljardte", 1000000000L)
        .put("biljonte", 1000000000000L)
        .put("biljardte", 1000000000000000L)
        .put("triljonte", 1000000000000000000L)
        .put("hundratals", 100L)
        .put("tusentals", 1000L)
        .put("miljontals", 1000000L)
        .put("miljardtals", 1000000000L)
        .put("biljontals", 1000000000000L)
        .put("biljardtals", 1000000000000000L)
        .put("triljontals", 1000000000000000000L)
        .put("dussin", 12L)
        .put("tjog", 20L)
        .put("dussintals", 12L)
        .put("k", 1000L)
        .put("m", 1000000L)
        .put("g", 1000000000L)
        .put("b", 1000000000L)
        .put("t", 1000000000000L)
        .build();

    public static final ImmutableMap<String, Long> SwedishWrittenFractionLookupMap = ImmutableMap.<String, Long>builder()
        .put("tjugoförst", 21L)
        .put("tjugoandr", 22L)
        .put("tjugotred", 23L)
        .put("tjugofjärd", 24L)
        .put("tjugofemt", 25L)
        .put("tjugosjätted", 26L)
        .put("tjugosjund", 27L)
        .put("tjugoåttond", 28L)
        .put("tjugoniond", 29L)
        .put("trettioförst", 31L)
        .put("trettoiandr", 32L)
        .put("trettiotred", 33L)
        .put("trettiofjärd", 34L)
        .put("trettiofemt", 35L)
        .put("trettiosjätted", 36L)
        .put("trettiosjund", 37L)
        .put("trettioåttond", 38L)
        .put("trettioniond", 39L)
        .put("fyrtioförst", 41L)
        .put("fyrtioandr", 42L)
        .put("fyrtiotred", 43L)
        .put("fyrtiofjärd", 44L)
        .put("fyrtiofemt", 45L)
        .put("fyrtiosjätted", 46L)
        .put("fyrtiosjund", 47L)
        .put("fyrtioåttond", 48L)
        .put("fyrtioniond", 49L)
        .put("femtioförst", 51L)
        .put("femtioandr", 52L)
        .put("femtiotred", 53L)
        .put("femtiofjärd", 54L)
        .put("femtiofemt", 55L)
        .put("femtiosjätted", 56L)
        .put("femtiosjund", 57L)
        .put("femtioåttond", 58L)
        .put("femtioniond", 59L)
        .put("sextioförst", 61L)
        .put("sextioandr", 62L)
        .put("sextiotred", 63L)
        .put("sextiofjärd", 64L)
        .put("sextiofemt", 65L)
        .put("sextiosjätted", 66L)
        .put("sextiosjund", 67L)
        .put("sextioåttond", 68L)
        .put("sextioniond", 69L)
        .put("sjuttioförst", 71L)
        .put("sjuttioandr", 72L)
        .put("sjuttiotred", 73L)
        .put("sjuttiofjärd", 74L)
        .put("sjuttiofemt", 75L)
        .put("sjuttiosjätted", 76L)
        .put("sjuttiosjund", 77L)
        .put("sjuttioåttond", 78L)
        .put("sjuttioniond", 79L)
        .put("åttioförst", 81L)
        .put("åttioandr", 82L)
        .put("åttiotred", 83L)
        .put("åttiofjärd", 84L)
        .put("åttiofemt", 85L)
        .put("åttiosjätted", 86L)
        .put("åttiosjund", 87L)
        .put("åttioåttond", 88L)
        .put("åttioniond", 89L)
        .put("nittioförst", 91L)
        .put("nittioandr", 92L)
        .put("nittiotred", 93L)
        .put("nittiofjärd", 94L)
        .put("nittiofemt", 95L)
        .put("nittiosjätted", 96L)
        .put("nittiosjund", 97L)
        .put("nittioåttond", 98L)
        .put("nittioniond", 99L)
        .put("förstadelar", 1L)
        .put("förstedelar", 1L)
        .put("förstedel", 1L)
        .put("förstadel", 1L)
        .put("andradelar", 2L)
        .put("andredelar", 2L)
        .put("tredjedelar", 3L)
        .put("tredjedel", 3L)
        .put("tredjedels", 3L)
        .put("fjärdedelar", 4L)
        .put("fjärdedel", 4L)
        .put("fjärdedels", 4L)
        .put("kvartar", 4L)
        .put("kvart", 4L)
        .put("kvarts", 4L)
        .put("femtedelar", 5L)
        .put("femtedel", 5L)
        .put("femtedels", 5L)
        .put("sjättedelar", 6L)
        .put("sjättedel", 6L)
        .put("sjättedels", 6L)
        .put("sjundedelar", 7L)
        .put("sjundedel", 7L)
        .put("sjundedels", 7L)
        .put("åttondelar", 8L)
        .put("åttondedelar", 8L)
        .put("åttondel", 8L)
        .put("åttondedel", 8L)
        .put("åttondels", 8L)
        .put("åttondedels", 8L)
        .put("niondelar", 9L)
        .put("niondedelar", 9L)
        .put("niondel", 9L)
        .put("niondedel", 9L)
        .put("niondels", 9L)
        .put("niondedels", 9L)
        .put("tiondelar", 10L)
        .put("tiondedelar", 10L)
        .put("tiondel", 10L)
        .put("tiondedel", 10L)
        .put("tiondels", 10L)
        .put("tiondedels", 10L)
        .put("elftedelar", 11L)
        .put("elftedel", 11L)
        .put("elftedels", 11L)
        .put("tolftedelar", 12L)
        .put("tolftedel", 12L)
        .put("tolftedels", 12L)
        .put("trettondelar", 13L)
        .put("trettondedelar", 13L)
        .put("trettondel", 13L)
        .put("trettondedel", 13L)
        .put("trettondels", 13L)
        .put("trettondedels", 13L)
        .put("fjortondelar", 14L)
        .put("fjortondedelar", 14L)
        .put("fjortondel", 14L)
        .put("fjortondedel", 14L)
        .put("fjortondels", 14L)
        .put("fjortondedels", 14L)
        .put("femtondelar", 15L)
        .put("femtondedelar", 15L)
        .put("femtondel", 15L)
        .put("femtondedel", 15L)
        .put("femtondels", 15L)
        .put("femtondedels", 15L)
        .put("sextondelar", 16L)
        .put("sextondedelar", 16L)
        .put("sextondel", 16L)
        .put("sextondedel", 16L)
        .put("sextondels", 16L)
        .put("sextondedels", 16L)
        .put("sjuttondelar", 17L)
        .put("sjuttondedelar", 17L)
        .put("sjuttondel", 17L)
        .put("sjuttondedel", 17L)
        .put("sjuttondels", 17L)
        .put("sjuttondedels", 17L)
        .put("artondelar", 18L)
        .put("artondedelar", 18L)
        .put("artondel", 18L)
        .put("artondedel", 18L)
        .put("artondels", 18L)
        .put("artondedels", 18L)
        .put("nittondelar", 19L)
        .put("nittondedelar", 19L)
        .put("nittondel", 19L)
        .put("nittondedel", 19L)
        .put("nittondels", 19L)
        .put("nittondedels", 19L)
        .put("tjugondelar", 20L)
        .put("tjugondedelar", 20L)
        .put("tjugondel", 20L)
        .put("tjugondedel", 20L)
        .put("tjugondels", 20L)
        .put("tjugondedels", 20L)
        .put("trettiondelar", 30L)
        .put("trettiondedelar", 30L)
        .put("trettiondel", 30L)
        .put("trettiondedel", 30L)
        .put("trettiondels", 30L)
        .put("trettiondedels", 30L)
        .put("fyrtiondelar", 40L)
        .put("fyrtiondedelar", 40L)
        .put("fyrtiondel", 40L)
        .put("fyrtiondedel", 40L)
        .put("fyrtiondels", 40L)
        .put("fyrtiondedels", 40L)
        .put("femtiondelar", 50L)
        .put("femtiondedelar", 50L)
        .put("femtiondel", 50L)
        .put("femtiondedel", 50L)
        .put("femtiondels", 50L)
        .put("femtiondedels", 50L)
        .put("sextiondelar", 60L)
        .put("sextiondedelar", 60L)
        .put("sextiondedels", 60L)
        .put("sextiondels", 60L)
        .put("sextiondel", 60L)
        .put("sextiondedel", 60L)
        .put("sjuttiondelar", 70L)
        .put("sjuttiondedelar", 70L)
        .put("sjuttiondel", 70L)
        .put("sjuttiondedel", 70L)
        .put("sjuttiondels", 70L)
        .put("sjuttiondedels", 70L)
        .put("åttiondelar", 80L)
        .put("åttiondedelar", 80L)
        .put("åttiondel", 80L)
        .put("åttiondedel", 80L)
        .put("åttiondels", 80L)
        .put("åttiondedels", 80L)
        .put("nittiondelar", 90L)
        .put("nittiondedelar", 90L)
        .put("nittiondel", 90L)
        .put("nittiondedel", 90L)
        .put("nittiondels", 90L)
        .put("nittiondedels", 90L)
        .put("hundradelar", 100L)
        .put("hundradedelar", 100L)
        .put("hundradel", 100L)
        .put("hundradedel", 100L)
        .put("hundradels", 100L)
        .put("hundradedels", 100L)
        .put("tusendelar", 1000L)
        .put("tusendedelar", 1000L)
        .put("tusendel", 1000L)
        .put("tusendedel", 1000L)
        .put("tusendels", 1000L)
        .put("tusendedels", 1000L)
        .put("miljondelar", 1000000L)
        .put("miljontedelar", 1000000L)
        .put("miljondel", 1000000L)
        .put("miljontedel", 1000000L)
        .put("miljontedels", 1000000L)
        .put("miljondels", 1000000L)
        .put("miljarddelar", 1000000000L)
        .put("miljarddel", 1000000000L)
        .put("miljarddels", 1000000000L)
        .put("biljondelar", 1000000000000L)
        .put("biljondel", 1000000000000L)
        .put("biljontedel", 1000000000000L)
        .put("biljondels", 1000000000000L)
        .put("biljarddelar", 1000000000000000L)
        .put("biljarddel", 1000000000000000L)
        .put("biljarddels", 1000000000000000L)
        .put("triljondelar", 1000000000000000000L)
        .put("triljontedelar", 1000000000000000000L)
        .put("triljontedels", 1000000000000000000L)
        .put("triljondels", 1000000000000000000L)
        .put("triljondel", 1000000000000000000L)
        .build();

    public static final ImmutableMap<String, String> AmbiguityFiltersDict = ImmutableMap.<String, String>builder()
        .put("\\ben\\b", "\\b(en)\\s+(en)\\b")
        .put("m", "\\dm\\b")
        .build();

    public static final ImmutableMap<String, String> RelativeReferenceOffsetMap = ImmutableMap.<String, String>builder()
        .put("sista", "0")
        .put("siste", "0")
        .put("senaste", "0")
        .put("nästa", "1")
        .put("näste", "1")
        .put("efter nuvarande", "1")
        .put("nuvarande", "0")
        .put("föregående", "-1")
        .put("före nuvarande", "-1")
        .put("förra", "-1")
        .put("tidigare", "-1")
        .put("näst sista", "-1")
        .put("näst siste", "-1")
        .put("före den sista", "-1")
        .put("före den siste", "-1")
        .put("före sista", "-1")
        .put("före siste", "-1")
        .put("innan siste", "-1")
        .put("innan sista", "-1")
        .put("efter sista", "-1")
        .put("efter siste", "-1")
        .put("tredje från slutet", "-2")
        .build();

    public static final ImmutableMap<String, String> RelativeReferenceRelativeToMap = ImmutableMap.<String, String>builder()
        .put("sista", "end")
        .put("siste", "end")
        .put("senaste", "end")
        .put("nästa", "current")
        .put("näste", "current")
        .put("efter nuvarande", "current")
        .put("nuvarande", "current")
        .put("föregående", "current")
        .put("före nuvarande", "current")
        .put("förra", "current")
        .put("tidigare", "current")
        .put("näst sista", "end")
        .put("näst siste", "end")
        .put("före den sista", "end")
        .put("före den siste", "end")
        .put("före siste", "end")
        .put("före sista", "end")
        .put("innan siste", "end")
        .put("innan sista", "end")
        .put("efter sista", "end")
        .put("efter siste", "end")
        .put("tredje från slutet", "end")
        .build();
}
