// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// ------------------------------------------------------------------------------

package com.microsoft.recognizers.text.datetime.resources;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.common.collect.ImmutableMap;

public class SwedishDateTime {

    public static final String LangMarker = "Swe";

    public static final Boolean CheckBothBeforeAfter = false;

    public static final String TillRegex = "(?<till>\\b(till|tom)\\b(\\s+den\\b)?|{BaseDateTime.RangeConnectorSymbolRegex})"
            .replace("{BaseDateTime.RangeConnectorSymbolRegex}", BaseDateTime.RangeConnectorSymbolRegex);

    public static final String RangeConnectorRegex = "(?<and>\\b(och|tom)\\b(\\s+den\\b)?|{BaseDateTime.RangeConnectorSymbolRegex})"
            .replace("{BaseDateTime.RangeConnectorSymbolRegex}", BaseDateTime.RangeConnectorSymbolRegex);

    public static final String LastNegPrefix = "(?<!(w(ill|ould|on\\s*'\\s*t)|m(ay|ight|ust)|sh(all|ould(n\\s*'\\s*t)?)|c(an(\\s*'\\s*t|not)?|ould(n\\s*'\\s*t)?))(\\s+not)?\\s+)";

    public static final String RelativeRegex = "\\b(?<order>efter|nästa|kommande|de(nn|tt)a|de(n|t)\\s+här|{LastNegPrefix}senaste|förra|tidigare|innevarande)\\b"
            .replace("{LastNegPrefix}", LastNegPrefix);

    public static final String StrictRelativeRegex = "\\b(?<order>efter|nästa|kommande|de(nn|tt)a|de(n|t)\\s+här|{LastNegPrefix}senaste|förra|tidigare|innevarande)\\b"
            .replace("{LastNegPrefix}", LastNegPrefix);

    public static final String UpcomingPrefixRegex = "((de(n|t)\\s+)?(kommande))";

    public static final String NextPrefixRegex = "\\b(efter|nästa|{UpcomingPrefixRegex})\\b"
            .replace("{UpcomingPrefixRegex}", UpcomingPrefixRegex);

    public static final String AfterNextSuffixRegex = "\\b(efter\\s+nästa)\\b";

    public static final String PastPrefixRegex = "((de(n|t)\\s+)?förra)\\b";

    public static final String PreviousPrefixRegex = "({LastNegPrefix}förra|föregående|{PastPrefixRegex})\\b"
            .replace("{LastNegPrefix}", LastNegPrefix)
            .replace("{PastPrefixRegex}", PastPrefixRegex);

    public static final String ThisPrefixRegex = "(innevarande|de(nn|tt)a|de(n|t)\\s+här)\\b";

    public static final String RangePrefixRegex = "(från|mellan)";

    public static final String CenturySuffixRegex = "(^sekel)\\b";

    public static final String ReferencePrefixRegex = "(samma)\\b";

    public static final String FutureSuffixRegex = "\\b((i\\s+)?framtiden)\\b";

    public static final String PastSuffixRegex = "\\b((i\\s+)dåtid(en)?)\\b";

    public static final String DayRegex = "(den\\s*)?(?<!(\\d+:?|\\$)\\s*)(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9])(?:\\:(a|e))?)(?=\\b|t)";

    public static final String ImplicitDayRegex = "(den\\s*)?(?<day>(?:3[0-1]|[0-2]?\\d)(?:\\:(a|e)))\\b";

    public static final String MonthNumRegex = "(?<month>1[0-2]|(0)?[1-9])\\b";

    public static final String WrittenOneToNineRegex = "(?:e(n|tt)|två|tre|fyra|fem|sex|sju|åtta|nio)";

    public static final String WrittenElevenToNineteenRegex = "(?:elva|tolv|(?:tret|fjor|fem|sex|sjut|ar|nit)ton)";

    public static final String WrittenTensRegex = "(?:tio|tjugo|trettio|fyrtio|femtio|sextio|sjuttio|åttio|nittio)";

    public static final String WrittenNumRegex = "(?:{WrittenOneToNineRegex}|{WrittenElevenToNineteenRegex}|{WrittenTensRegex}(\\s*{WrittenOneToNineRegex})?)"
            .replace("{WrittenOneToNineRegex}", WrittenOneToNineRegex)
            .replace("{WrittenElevenToNineteenRegex}", WrittenElevenToNineteenRegex)
            .replace("{WrittenTensRegex}", WrittenTensRegex);

    public static final String WrittenCenturyFullYearRegex = "(?:(ett|två)\\s+tusen(\\s*{WrittenOneToNineRegex}\\s*hundra)?)"
            .replace("{WrittenOneToNineRegex}", WrittenOneToNineRegex);

    public static final String WrittenCenturyOrdinalYearRegex = "(?:tjugo(\\s+(ett|två))?|tio|elva|tolv|tretton|femton|arton|tjugo|(?:fjor|sex|sjut|nit)(ton)?|ett|två|tre|fyra|fem|sju|åtta|nio)";

    public static final String CenturyRegex = "\\b(?<century>{WrittenCenturyFullYearRegex}|(ett|två)tusen|{WrittenCenturyOrdinalYearRegex}(\\s*hundra)?)"
            .replace("{WrittenCenturyFullYearRegex}", WrittenCenturyFullYearRegex)
            .replace("{WrittenCenturyOrdinalYearRegex}", WrittenCenturyOrdinalYearRegex);

    public static final String LastTwoYearNumRegex = "(?:(noll\\s+)?{WrittenOneToNineRegex}|{WrittenElevenToNineteenRegex}|{WrittenTensRegex}(\\s*{WrittenOneToNineRegex})?)"
            .replace("{WrittenOneToNineRegex}", WrittenOneToNineRegex)
            .replace("{WrittenElevenToNineteenRegex}", WrittenElevenToNineteenRegex)
            .replace("{WrittenTensRegex}", WrittenTensRegex);

    public static final String FullTextYearRegex = "\\b((?<firsttwoyearnum>{CenturyRegex})(\\s+och)?\\s*(?<lasttwoyearnum>{LastTwoYearNumRegex})\\b|\\b(?<firsttwoyearnum>{WrittenCenturyFullYearRegex}|{WrittenCenturyOrdinalYearRegex}\\s*hundra))\\b"
            .replace("{CenturyRegex}", CenturyRegex)
            .replace("{WrittenCenturyFullYearRegex}", WrittenCenturyFullYearRegex)
            .replace("{WrittenCenturyOrdinalYearRegex}", WrittenCenturyOrdinalYearRegex)
            .replace("{LastTwoYearNumRegex}", LastTwoYearNumRegex);

    public static final String OclockRegex = "(?<oclock>o\\s*((’|‘|')\\s*)?clock|sharp|prick)";

    public static final String SpecialDescRegex = "((?<ipm>)p\\b)";

    public static final String AmDescRegex = "(?:{BaseDateTime.BaseAmDescRegex})"
            .replace("{BaseDateTime.BaseAmDescRegex}", BaseDateTime.BaseAmDescRegex);

    public static final String PmDescRegex = "(:?{BaseDateTime.BasePmDescRegex})"
            .replace("{BaseDateTime.BasePmDescRegex}", BaseDateTime.BasePmDescRegex);

    public static final String AmPmDescRegex = "(:?{BaseDateTime.BaseAmPmDescRegex})"
            .replace("{BaseDateTime.BaseAmPmDescRegex}", BaseDateTime.BaseAmPmDescRegex);

    public static final String DescRegex = "(:?(:?({OclockRegex}\\s+)?(?<desc>({AmPmDescRegex}|{AmDescRegex}|{PmDescRegex}|{SpecialDescRegex})))|{OclockRegex})"
            .replace("{OclockRegex}", OclockRegex)
            .replace("{AmDescRegex}", AmDescRegex)
            .replace("{PmDescRegex}", PmDescRegex)
            .replace("{AmPmDescRegex}", AmPmDescRegex)
            .replace("{SpecialDescRegex}", SpecialDescRegex);

    public static final String OfPrepositionRegex = "(\\bi\\b)";

    public static final String TwoDigitYearRegex = "\\b(?<![$])(?<year>([0-9]\\d))(?!(\\s*((\\:\\d)|{AmDescRegex}|{PmDescRegex}|\\.\\d)))\\b"
            .replace("{AmDescRegex}", AmDescRegex)
            .replace("{PmDescRegex}", PmDescRegex);

    public static final String YearRegex = "(?:{BaseDateTime.FourDigitYearRegex}|{FullTextYearRegex})"
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{FullTextYearRegex}", FullTextYearRegex);

    public static final String WeekDayRegex = "\\b(?<weekday>(?:sö(n)?|må(n)?|ti(s)?|on(s)?|to(rs)?|fr(e)?|lö(r)?))(d(ags?(en|ar)?)?)?\\b";

    public static final String SingleWeekDayRegex = "\\b(?<weekday>(?<!(easter|palm)\\s+)söndag|(?<!easter\\s+)lördag|(?<!(easter|cyber)\\s+)måndag|mån|(?<!black\\s+)fredag|fri|fre|(?:ti(sd?)?|tors?)(dag)?|tor|on(sdag)?|ons?|((?<=på\\s+)(lör|sön)))\\b";

    public static final String RelativeMonthRegex = "(?<relmonth>((dag\\s+)?i\\s+)?{RelativeRegex}\\s+månad(en)?)\\b"
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String MonthRegex = "\\b(?<month>apr(il)?|aug(usti)?|dec(ember)?|feb(ruari)?|jan(uari)?|juli?|juni?|mar(s)?|maj|nov(ember)?|okt(ober)?|sept(ember)?|sep)(?!\\p{L})";

    public static final String WrittenMonthRegex = "((i\\s+)?{MonthRegex}(\\s+månad)?)"
            .replace("{MonthRegex}", MonthRegex);

    public static final String MonthSuffixRegex = "(?<msuf>(?:(i|under)\\s+)?({RelativeMonthRegex}|{WrittenMonthRegex}))"
            .replace("{RelativeMonthRegex}", RelativeMonthRegex)
            .replace("{WrittenMonthRegex}", WrittenMonthRegex);

    public static final String DateUnitRegex = "(?<unit>(decenni(um)?|år|(?<uoy>månad|vecka?)|(?<business>(arbets\\s*|vecka?\\s*))?(?<uoy>dag)|weekend|helg)(?<plural>(s|or|ors|er|ers|ar|ars|e?n))?|(?<=\\s+\\d{1,4})[ymwd])\\b";

    public static final String DateTokenPrefix = "den ";

    public static final String TimeTokenPrefix = "kl ";

    public static final String TokenBeforeDate = "den ";

    public static final String TokenBeforeTime = "kl ";

    public static final String HalfTokenRegex = "^(halv)";

    public static final String QuarterTokenRegex = "^((en\\s+)?kvart)";

    public static final String ThreeQuarterTokenRegex = "^(tre\\s+kvart(ar)?)";

    public static final String ToTokenRegex = "\\b(till)$";

    public static final String FromRegex = "\\b(från(\\s+den)?)$";

    public static final String BetweenTokenRegex = "\\b(mellan(\\s+den)?)$";

    public static final String SimpleCasesRegex = "\\b({RangePrefixRegex}\\s+)?({DayRegex})\\s*{TillRegex}\\s*({DayRegex}\\s+{MonthSuffixRegex}|{MonthSuffixRegex}\\s+{DayRegex})((\\s+|\\s*,\\s*){YearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{YearRegex}", YearRegex)
            .replace("{RangePrefixRegex}", RangePrefixRegex);

    public static final String MonthFrontSimpleCasesRegex = "\\b({RangePrefixRegex}\\s+)?{MonthSuffixRegex}\\s+((från)\\s+)?({DayRegex})\\s*{TillRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){YearRegex})?\\b"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{YearRegex}", YearRegex)
            .replace("{RangePrefixRegex}", RangePrefixRegex);

    public static final String MonthFrontBetweenRegex = "\\b{MonthSuffixRegex}\\s+(mellan\\s+)({DayRegex})\\s*{RangeConnectorRegex}\\s*({DayRegex})((\\s+|\\s*,\\s*){YearRegex})?\\b"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{RangeConnectorRegex}", RangeConnectorRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String BetweenRegex = "\\b(mellan\\s+)({DayRegex})\\s*{RangeConnectorRegex}\\s*({DayRegex})\\s+{MonthSuffixRegex}((\\s+|\\s*,\\s*){YearRegex})?\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{RangeConnectorRegex}", RangeConnectorRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{YearRegex}", YearRegex);

    public static final String MonthWithYear = "\\b((({WrittenMonthRegex}[\\.]?|((den\\s+)?(?<cardinal>först(e|a)|1:(e|a)|andr(e|a)|2:(a|e)|tredje|3:e|fjärde|4:e|femte|5:e|sjätte|6:e|sjunde|7:e|åttonde|8:e|nionde|9:e|tionde|10:e|elfte|11:e|tolfte|12:e|senaste)\\s+månaden(?=\\s+(of|in))))((\\s*)[/\\\\\\-\\.,]?(\\s+(of|in))?(\\s*)({YearRegex}|(?<order>kommande|nästa|senaste|detta)\\s+år(et)?)|\\s+(of|in)\\s+{TwoDigitYearRegex}))|(({YearRegex}|(?<order>kommande|nästa|senaste|detta)\\s+år(et)?)(\\s*),?(\\s*){WrittenMonthRegex}))\\b"
            .replace("{WrittenMonthRegex}", WrittenMonthRegex)
            .replace("{YearRegex}", YearRegex)
            .replace("{TwoDigitYearRegex}", TwoDigitYearRegex);

    public static final String SpecialYearPrefixes = "(kalender|(?<special>räkenskaps|skol|läs))";

    public static final String OneWordPeriodRegex = "\\b((((the\\s+)?month of\\s+)?({StrictRelativeRegex}\\s+)?{MonthRegex})|(month|year) to date|(?<toDate>((un)?till?|to)\\s+date)|({RelativeRegex}\\s+)?(my\\s+)?((?<business>working\\s+week|workweek)|week(end)?|month|fortnight|(({SpecialYearPrefixes}\\s+)?year))(?!((\\s+of)?\\s+\\d+(?!({BaseDateTime.BaseAmDescRegex}|{BaseDateTime.BasePmDescRegex}))|\\s+to\\s+date))(\\s+{AfterNextSuffixRegex})?)\\b"
            .replace("{StrictRelativeRegex}", StrictRelativeRegex)
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{AfterNextSuffixRegex}", AfterNextSuffixRegex)
            .replace("{SpecialYearPrefixes}", SpecialYearPrefixes)
            .replace("{BaseDateTime.BaseAmDescRegex}", BaseDateTime.BaseAmDescRegex)
            .replace("{BaseDateTime.BasePmDescRegex}", BaseDateTime.BasePmDescRegex)
            .replace("{MonthRegex}", MonthRegex);

    public static final String MonthNumWithYear = "\\b(({BaseDateTime.FourDigitYearRegex}(\\s*)[/\\-\\.](\\s*){MonthNumRegex})|({MonthNumRegex}(\\s*)[/\\-](\\s*){BaseDateTime.FourDigitYearRegex}))\\b"
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{MonthNumRegex}", MonthNumRegex);

    public static final String WeekOfMonthRegex = "\\b(?<wom>(den\\s+)?(?<cardinal>första|1:a|andra|2:a|tredje|3:e|fjärde|4:e|femte|5:e|sista)\\s+veckan\\s+{MonthSuffixRegex}(\\s+{BaseDateTime.FourDigitYearRegex}|{RelativeRegex}\\s+år)?)\\b"
            .replace("{MonthSuffixRegex}", MonthSuffixRegex)
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String WeekOfYearRegex = "\\b(?<woy>(den\\s+)?(?<cardinal>första|1:a|andra|2:a|tredje|3:e|fjärde|4:e|femte|5:e|sista)\\s+veckan(\\s+i)?\\s+({YearRegex}|{RelativeRegex}\\s+år))\\b"
            .replace("{YearRegex}", YearRegex)
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String OfYearRegex = "\\b((i)\\s+({YearRegex}|{StrictRelativeRegex}\\s+år))\\b"
            .replace("{YearRegex}", YearRegex)
            .replace("{StrictRelativeRegex}", StrictRelativeRegex);

    public static final String FirstLastRegex = "\\b(den\\s+)?((?<first>första)|(?<last>sista))\\b";

    public static final String FollowedDateUnit = "^\\s*{DateUnitRegex}"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String NumberCombinedWithDateUnit = "\\b(?<num>\\d+(\\.\\d*)?){DateUnitRegex}"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String QuarterTermRegex = "\\b(((?<cardinal>första|1:a|andra|2:a|tredje|3:e|fjärde|4:e)[ -]+kvartalet)|(q(?<number>[1-4])))\\b";

    public static final String RelativeQuarterTermRegex = "\\b(?<orderQuarter>{StrictRelativeRegex})\\s+kvartalet\\b"
            .replace("{StrictRelativeRegex}", StrictRelativeRegex);

    public static final String QuarterRegex = "((det\\s+)?{QuarterTermRegex}(?:((\\s+under)?\\s+|\\s*[,-]\\s*)({YearRegex}|{RelativeRegex}\\s+year))?)|{RelativeQuarterTermRegex}"
            .replace("{YearRegex}", YearRegex)
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{QuarterTermRegex}", QuarterTermRegex)
            .replace("{RelativeQuarterTermRegex}", RelativeQuarterTermRegex);

    public static final String QuarterRegexYearFront = "(?:{YearRegex}|{RelativeRegex}\\s+year)('s)?(?:\\s*-\\s*|\\s+(det\\s+)?)?{QuarterTermRegex}"
            .replace("{YearRegex}", YearRegex)
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{QuarterTermRegex}", QuarterTermRegex);

    public static final String HalfYearTermRegex = "(?<cardinal>första|1:a|andra|2:a)\\s+halvåret";

    public static final String HalfYearFrontRegex = "(?<year>((1[5-9]|20)\\d{2})|2100)(\\s*-\\s*|\\s+(det\\s+)?)?h(?<number>[1-2])"
            .replace("{YearRegex}", YearRegex);

    public static final String HalfYearBackRegex = "(det\\s+)?(h(?<number>[1-2])|({HalfYearTermRegex}))(\\s+under|\\s*,\\s*)?\\s+({YearRegex})"
            .replace("{YearRegex}", YearRegex)
            .replace("{HalfYearTermRegex}", HalfYearTermRegex);

    public static final String HalfYearRelativeRegex = "(det\\s+)?{HalfYearTermRegex}(\\s+under|\\s*,\\s*)?\\s+({RelativeRegex}\\s+år)"
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{HalfYearTermRegex}", HalfYearTermRegex);

    public static final String AllHalfYearRegex = "({HalfYearFrontRegex})|({HalfYearBackRegex})|({HalfYearRelativeRegex})"
            .replace("{HalfYearFrontRegex}", HalfYearFrontRegex)
            .replace("{HalfYearBackRegex}", HalfYearBackRegex)
            .replace("{HalfYearRelativeRegex}", HalfYearRelativeRegex);

    public static final String EarlyPrefixRegex = "\\b(?<EarlyPrefix>early|början av|början på|(?<RelEarly>tidigare(\\s+under)?))\\b";

    public static final String MidPrefixRegex = "\\b(?<MidPrefix>mitten av)\\b";

    public static final String LaterPrefixRegex = "\\b(?<LatePrefix>slutet på|slutet av|(?<RelLate>senare(\\s+under)?))\\b";

    public static final String PrefixPeriodRegex = "({EarlyPrefixRegex}|{MidPrefixRegex}|{LaterPrefixRegex})"
            .replace("{EarlyPrefixRegex}", EarlyPrefixRegex)
            .replace("{MidPrefixRegex}", MidPrefixRegex)
            .replace("{LaterPrefixRegex}", LaterPrefixRegex);

    public static final String PrefixDayRegex = "\\b((?<EarlyPrefix>tidig(t|are))|(?<MidPrefix>mitt på)|(?<LatePrefix>senare?))(\\s+på)?(\\s+dagen)?$";

    public static final String SeasonDescRegex = "(?<seas>våren|sommaren|hösten|vintern)";

    public static final String SeasonRegex = "\\b(?<season>({PrefixPeriodRegex}\\s+)?({RelativeRegex}\\s+)?{SeasonDescRegex}((\\s+|\\s*,\\s*)?\\s+({YearRegex}|{RelativeRegex}\\s+året))?)\\b"
            .replace("{YearRegex}", YearRegex)
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{SeasonDescRegex}", SeasonDescRegex)
            .replace("{PrefixPeriodRegex}", PrefixPeriodRegex);

    public static final String WhichWeekRegex = "\\b(vecka)(\\s*)(?<number>5[0-3]|[1-4]\\d|0?[1-9])\\b";

    public static final String WeekOfRegex = "((veckan)(\\s+(som|(börjar|startar|inleds)(\\s+den)?))|w/c)(\\s+den)?";

    public static final String MonthOfRegex = "(månaden)(\\s*)(i)";

    public static final String DateYearRegex = "(?<year>{BaseDateTime.FourDigitYearRegex}|(?<!,\\s?){TwoDigitYearRegex}|{TwoDigitYearRegex}(?=(\\.(?!\\d)|[?!;]|$)))"
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{TwoDigitYearRegex}", TwoDigitYearRegex);

    public static final String YearSuffix = "((,|\\si)?\\s*({DateYearRegex}|{FullTextYearRegex}))"
            .replace("{DateYearRegex}", DateYearRegex)
            .replace("{FullTextYearRegex}", FullTextYearRegex);

    public static final String OnRegex = "(?<=\\bden\\s+)({DayRegex}s?)\\b"
            .replace("{DayRegex}", DayRegex);

    public static final String RelaxedOnRegex = "(?<=\\b(den|om|på)\\s+)((?<day>(3[0-1]|[0-2]?\\d)(?:(a|e)))s?)\\b";

    public static final String PrefixWeekDayRegex = "(\\s*((,?\\s*på)|[-—–]))";

    public static final String ThisRegex = "\\b(denna(\\s*vecka{PrefixWeekDayRegex}?)?\\s*{WeekDayRegex})|({WeekDayRegex}((\\s+i)?\\s+(denna|den\\s+här)\\s*veckan?))\\b|((på|den(na|\\s+här))\\s+){WeekDayRegex}$"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{PrefixWeekDayRegex}", PrefixWeekDayRegex);

    public static final String LastDateRegex = "\\b({PreviousPrefixRegex}(\\s*vecka{PrefixWeekDayRegex}?)?\\s*{WeekDayRegex})|({WeekDayRegex}(\\s+(den\\s+)?senaste\\s*veckan))\\b|({WeekDayRegex}\\s+(i\\s+)?{PreviousPrefixRegex}\\s*veckan)\\b|(i\\s+{WeekDayRegex})\\b"
            .replace("{PreviousPrefixRegex}", PreviousPrefixRegex)
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{PrefixWeekDayRegex}", PrefixWeekDayRegex);

    public static final String NextDateRegex1 = "\\b({NextPrefixRegex}(\\s*vecka{PrefixWeekDayRegex}?)?\\s*{WeekDayRegex})"
            .replace("{NextPrefixRegex}", NextPrefixRegex)
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{PrefixWeekDayRegex}", PrefixWeekDayRegex);

    public static final String NextDateRegex2 = "\\b((på\\s+)?{WeekDayRegex}((\\s+i)?\\s+(den\\s+kommande|nästa)\\s*vecka))\\b"
            .replace("{NextPrefixRegex}", NextPrefixRegex)
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{PrefixWeekDayRegex}", PrefixWeekDayRegex);

    public static final String NextDateRegex = "({NextDateRegex2}|{NextDateRegex1})"
            .replace("{NextDateRegex1}", NextDateRegex1)
            .replace("{NextDateRegex2}", NextDateRegex2);

    public static final String SpecialDayRegex = "\\b(i förrgår|i övermorgon|dagen\\s+(före|efter)(?!=\\s+dag)|((den\\s+)?({RelativeRegex}|min)\\s+dag)|igår|imorgon|idag)\\b"
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String SpecialDayWithNumRegex = "\\b((?<number>{WrittenNumRegex})\\s+dag(ar(s)?)?\\s+från\\s+(?<day>igår|imorgon|idag))\\b"
            .replace("{WrittenNumRegex}", WrittenNumRegex);

    public static final String RelativeDayRegex = "\\b(((den\\s+)?{RelativeRegex}\\s+dag(en)?))\\b"
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String SetWeekDayRegex = "\\b(?<prefix>på\\s+)?(?<weekday>morgonen|eftermiddagen|kvällen|natten|(sön|mån|tis|ons|tors|fre|lör)dag(s|en|ar|ars))\\b";

    public static final String WeekDayOfMonthRegex = "(?<wom>(den\\s+)?(?<cardinal>första|1:a|andra|2:a|tredje|3:e|fjärde|4:e|femte|5:e|sista)\\s+(veckan\\s+{MonthSuffixRegex}[\\.]?\\s+(på\\s+)?{WeekDayRegex}|{WeekDayRegex}\\s+{MonthSuffixRegex}))"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{MonthSuffixRegex}", MonthSuffixRegex);

    public static final String RelativeWeekDayRegex = "\\b({WrittenNumRegex}\\s+{WeekDayRegex}\\s+(från\\s+nu|senare))\\b"
            .replace("{WrittenNumRegex}", WrittenNumRegex)
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String SpecialDate = "(?=\\b(den)s+){DayRegex}\\b"
            .replace("{DayRegex}", DayRegex);

    public static final String DatePreposition = "\\b(den|i)";

    public static final String DateExtractorYearTermRegex = "(\\s+|\\s*[/\\\\.,-]\\s*|\\s+under\\s+){DateYearRegex}"
            .replace("{DateYearRegex}", DateYearRegex);

    public static final String DayPrefix = "\\b({WeekDayRegex}|{SpecialDayRegex})\\b"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{SpecialDayRegex}", SpecialDayRegex);

    public static final String DateExtractor1 = "\\b({DayPrefix}\\s*[,-]?\\s*)?(({DayRegex}[\\.]?\\s*[/\\\\.,-]?\\s*{MonthRegex})|(\\({DayRegex}\\s*[-./ ]\\s*{MonthRegex}\\)))(\\s*\\(\\s*{DayPrefix}\\s*\\))?({DateExtractorYearTermRegex}\\b)?"
            .replace("{DayPrefix}", DayPrefix)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DateExtractorYearTermRegex}", DateExtractorYearTermRegex);

    public static final String DateExtractor2 = "\\b({DayPrefix}\\s*[,-]?\\s*)?(({MonthRegex}[\\.]?\\s*[/\\\\.,-]?\\s*{DayRegex})|(\\({MonthRegex}\\s*[-./]\\s*{DayRegex}\\)))(?!\\s*\\-\\s*\\d{2}\\b)(\\s*\\(\\s*{DayPrefix}\\s*\\))?({DateExtractorYearTermRegex}\\b)?"
            .replace("{DayPrefix}", DayPrefix)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DateExtractorYearTermRegex}", DateExtractorYearTermRegex);

    public static final String DateExtractor3 = "\\b({DayPrefix}(\\s+|\\s*,\\s*))?({DayRegex}[\\.]?(\\s+|\\s*[-,/]\\s*|\\s+i\\s+){MonthRegex}[\\.]?((\\s+i)?{DateExtractorYearTermRegex})?|{BaseDateTime.FourDigitYearRegex}\\s*[-./]?\\s*(den\\s+)?(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9])(?:(\\:)?(a|e))?)[\\.]?(\\s+|\\s*[-,/]\\s*|\\s+i\\s+){MonthRegex}[\\.]?)\\b"
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DateExtractorYearTermRegex}", DateExtractorYearTermRegex)
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{MonthRegex}", MonthRegex);

    public static final String DateExtractor4 = "\\b{MonthNumRegex}\\s*[/\\\\\\-]\\s*{DayRegex}[\\.]?\\s*[/\\\\\\-]\\s*{DateYearRegex}"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DateYearRegex}", DateYearRegex);

    public static final String DateExtractor5 = "\\b({DayPrefix}(\\s*,)?\\s+)?{DayRegex}\\s*[/\\\\\\-\\.]\\s*({MonthNumRegex}|{MonthRegex})\\s*[/\\\\\\-\\.]\\s*{DateYearRegex}(?!\\s*[/\\\\\\-\\.]\\s*\\d+)"
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DateYearRegex}", DateYearRegex);

    public static final String DateExtractor6 = "(?<={DatePreposition}\\s+)({StrictRelativeRegex}\\s+)?({DayPrefix}\\s+)?{MonthNumRegex}[\\-\\.]{DayRegex}(?![%]){BaseDateTime.CheckDecimalRegex}\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DatePreposition}", DatePreposition)
            .replace("{StrictRelativeRegex}", StrictRelativeRegex)
            .replace("{BaseDateTime.CheckDecimalRegex}", BaseDateTime.CheckDecimalRegex);

    public static final String DateExtractor7L = "\\b({DayPrefix}(\\s*,)?\\s+)?{MonthNumRegex}\\s*/\\s*{DayRegex}{DateExtractorYearTermRegex}(?![%])\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DateExtractorYearTermRegex}", DateExtractorYearTermRegex);

    public static final String DateExtractor7S = "\\b({DayPrefix}(\\s*,)?\\s+)?{MonthNumRegex}\\s*/\\s*{DayRegex}(?![%]){BaseDateTime.CheckDecimalRegex}\\b"
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{BaseDateTime.CheckDecimalRegex}", BaseDateTime.CheckDecimalRegex);

    public static final String DateExtractor8 = "(?<={DatePreposition}\\s+)({StrictRelativeRegex}\\s+)?({DayPrefix}\\s+)?{DayRegex}[\\\\\\-]{MonthNumRegex}(?![%]){BaseDateTime.CheckDecimalRegex}\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DatePreposition}", DatePreposition)
            .replace("{StrictRelativeRegex}", StrictRelativeRegex)
            .replace("{BaseDateTime.CheckDecimalRegex}", BaseDateTime.CheckDecimalRegex);

    public static final String DateExtractor9L = "\\b({DayPrefix}(\\s*,)?\\s+)?{DayRegex}\\s*/\\s*{MonthNumRegex}{DateExtractorYearTermRegex}(?![%])\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DateExtractorYearTermRegex}", DateExtractorYearTermRegex);

    public static final String DateExtractor9S = "\\b({DayPrefix}(\\s*,)?\\s+)?{DayRegex}\\s*/\\s*{MonthNumRegex}{BaseDateTime.CheckDecimalRegex}(?![%])\\b"
            .replace("{DayRegex}", DayRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{BaseDateTime.CheckDecimalRegex}", BaseDateTime.CheckDecimalRegex);

    public static final String DateExtractorNoSep = "\\b((?<![$])(?<year>((1\\d|20)\\d{2})|2100)(\\s+(?<month>1[0-2]|(0)?[1-9])\\s+(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9]))|(?<month>1[0-2]|(0)?[1-9])(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9])))\\b)";

    public static final String DateExtractorA = "\\b({DayPrefix}(\\s*,)?\\s+)?(({BaseDateTime.FourDigitYearRegex}\\s*[/\\\\\\-\\.]\\s*({MonthNumRegex}|{MonthRegex})\\s*[/\\\\\\-\\.]\\s*{DayRegex})|({MonthRegex}\\s*[/\\\\\\-\\.]\\s*{BaseDateTime.FourDigitYearRegex}\\s*[/\\\\\\-\\.]\\s*(the\\s+)?(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9])(?:th|nd|rd|st)?))|({DayRegex}\\s*[/\\\\\\-\\.]\\s*{BaseDateTime.FourDigitYearRegex}\\s*[/\\\\\\-\\.]\\s*{MonthRegex})|{DateExtractorNoSep})"
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{MonthNumRegex}", MonthNumRegex)
            .replace("{MonthRegex}", MonthRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{DayPrefix}", DayPrefix)
            .replace("{DateExtractorNoSep}", DateExtractorNoSep);

    public static final String OfMonth = "^(\\s*(dagen\\s+)?i)?\\s*{MonthRegex}"
            .replace("{MonthRegex}", MonthRegex);

    public static final String MonthEnd = "{MonthRegex}\\s*(den)?\\s*$"
            .replace("{MonthRegex}", MonthRegex);

    public static final String WeekDayEnd = "(den\\s+här\\s+)?{WeekDayRegex}\\s*,?(\\bden\\b)?\\s*$"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String WeekDayStart = "^\\s+(på\\s+)?{WeekDayRegex}(\\s+den)?\\b"
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String RangeUnitRegex = "\\b(?<unit>år(s)?|månad(er(s)?)?|veck(a|or(s)?)?)\\b";

    public static final String HourNumRegex = "\\b(?<hournum>noll|ett|två|tre|fyra|fem|sex|sju|åtta|nio|tio|elva|tolv)\\b";

    public static final String MinuteNumRegex = "(((?<tens>tjugo|trettio|fyrtio|femtio)(\\s*-?\\s*))?(?<minnum>ett|två|tre|fyra|fem|sex|sju|åtta|nio)|(?<minnum>tio|elva|tolv|tretton|femton|årton|(fjor|sex|sjut|nit)(ton)|tjugo|trettio|fyrtio|femtio))";

    public static final String DeltaMinuteNumRegex = "(((?<tens>tjugo|trettio|fyrtio|femtio)(\\s*-?\\s*))?(?<deltaminnum>ett|två|tre|fyra|fem|sex|sju|åtta|nio)|(?<deltaminnum>tio|elva|tolv|tretton|femton|arton|(fjor|sex|sjut|nit)(ton)|tjugo|trettio|fyrtio|femtio))";

    public static final String PmRegex = "(?<pm>(((?:kl|runt|circa|kring)\\s+(den\\s+)?)?(((tidig|sen)\\s+)?(eftermiddag|kväll)|midnatt|middag|lunch))|((kl|runt|circa|kring|till)\\s+natt(en)?))";

    public static final String PmRegexFull = "(?<pm>((?:kl|om|runt|circa)\\s+(the\\s+)?)?(((tidig|sen)\\s+)?(eftermiddag|kväll)|(mid)?natt|middag|lunch))";

    public static final String AmRegex = "(?<am>((?:kl|om|runt|circa)\\s+(the\\s+)?)?((tidig|sen)\\s+)?(morgon))";

    public static final String LunchRegex = "\\blunch\\b";

    public static final String NightRegex = "\\b(mid)?natt\\b";

    public static final String CommonDatePrefixRegex = "^[\\.]";

    public static final String LessThanOneHour = "(?<lth>(en\\s+)?kvart|tre kvart|halvtimme?|{BaseDateTime.DeltaMinuteRegex}(\\s+(minut(er)?|mins?))|{DeltaMinuteNumRegex}(\\s+(minut(er)?|mins?)))"
            .replace("{BaseDateTime.DeltaMinuteRegex}", BaseDateTime.DeltaMinuteRegex)
            .replace("{DeltaMinuteNumRegex}", DeltaMinuteNumRegex);

    public static final String WrittenTimeRegex = "(?<writtentime>{HourNumRegex}\\s+{MinuteNumRegex}(\\s+(minut(er)?|mins?))?)"
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{MinuteNumRegex}", MinuteNumRegex);

    public static final String TimePrefix = "(?<prefix>{LessThanOneHour}\\s+(över|i))"
            .replace("{LessThanOneHour}", LessThanOneHour);

    public static final String TimeSuffix = "(?<suffix>{AmRegex}|{PmRegex}|{OclockRegex})"
            .replace("{AmRegex}", AmRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{OclockRegex}", OclockRegex);

    public static final String TimeSuffixFull = "(?<suffix>{AmRegex}|{PmRegexFull}|{OclockRegex})"
            .replace("{AmRegex}", AmRegex)
            .replace("{PmRegexFull}", PmRegexFull)
            .replace("{OclockRegex}", OclockRegex);

    public static final String BasicTime = "\\b(?<basictime>{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}:{BaseDateTime.MinuteRegex}(:{BaseDateTime.SecondRegex})?|{BaseDateTime.HourRegex}(?![%\\d]))"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{BaseDateTime.SecondRegex}", BaseDateTime.SecondRegex);

    public static final String MidnightRegex = "(?<midnight>mid\\s*(-\\s*)?natt)";

    public static final String MidmorningRegex = "(?<midmorning>tidig\\s+förmiddag)";

    public static final String MidafternoonRegex = "(?<midafternoon>mid\\s*(-\\s*)?eftermiddag)";

    public static final String MiddayRegex = "(?<midday>middag|mitt\\s+på\\s+dagen|((12\\s)?lunch(tid)?))";

    public static final String MidTimeRegex = "(?<mid>({MidnightRegex}|{MidmorningRegex}|{MidafternoonRegex}|{MiddayRegex}))"
            .replace("{MidnightRegex}", MidnightRegex)
            .replace("{MidmorningRegex}", MidmorningRegex)
            .replace("{MidafternoonRegex}", MidafternoonRegex)
            .replace("{MiddayRegex}", MiddayRegex);

    public static final String AtRegex = "\\b(?:(?:(?<=\\b(at|(at)?\\s*runt|vid)\\s+)(?:{WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}(?!\\.\\d)(\\s*((?<iam>a)|(?<ipm>p)))?|{MidTimeRegex}))|{MidTimeRegex})\\b"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{MidTimeRegex}", MidTimeRegex);

    public static final String IshRegex = "\\b({BaseDateTime.HourRegex}(-|——)?tid|lunch(tid)?|middag(stid)?)\\b"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String TimeUnitRegex = "([^a-z]{1,}|\\b)(?<unit>(tim(me)?|min(ut)?|s(ek(und)?)?)(?<plural>mar|er)?|h)\\b";

    public static final String RestrictedTimeUnitRegex = "(?<unit>timme|minut)\\b";

    public static final String FivesRegex = "(?<tens>(?:femton|(?:tjugo|trettio|fyrtio|femtio)(\\s*fem)?|tio|fem))\\b";

    public static final String HourRegex = "\\b{BaseDateTime.HourRegex}"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String PeriodHourNumRegex = "\\b(?<hour>tjugo(\\s+(en|ett|två|tre|fyra))?|elva|tolv|tretton|femton|arton|(fjor|sex|sjut|nit)(ton)?|noll|ett|en|två|tre|fem|åtta|tio)\\b";

    public static final String ConnectNumRegex = "\\b{BaseDateTime.HourRegex}(?<min>[0-5][0-9])\\s*{DescRegex}"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegexWithDotConnector = "({BaseDateTime.HourRegex}(\\s*\\.\\s*){BaseDateTime.MinuteRegex})"
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex);

    public static final String TimeRegex1 = "\\b({TimePrefix}\\s+)?({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex})(\\s*|[.]){DescRegex}"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex2 = "(\\b{TimePrefix}\\s+)?(t)?{BaseDateTime.HourRegex}(\\s*)?:(\\s*)?{BaseDateTime.MinuteRegex}((\\s*)?:(\\s*)?{BaseDateTime.SecondRegex})?(?<iam>a)?((\\s*{DescRegex})|\\b)"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{BaseDateTime.SecondRegex}", BaseDateTime.SecondRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex3 = "(\\b{TimePrefix}\\s+)?{BaseDateTime.HourRegex}\\.{BaseDateTime.MinuteRegex}(\\s*{DescRegex})"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex4 = "\\b{TimePrefix}\\s+{BasicTime}(\\s*{DescRegex})?\\s+{TimeSuffix}\\b"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex)
            .replace("{TimeSuffix}", TimeSuffix);

    public static final String TimeRegex5 = "\\b{TimePrefix}\\s+{BasicTime}((\\s*{DescRegex})|\\b)"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex6 = "({BasicTime})(\\s*{DescRegex})?\\s+{TimeSuffix}\\b"
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex)
            .replace("{TimeSuffix}", TimeSuffix);

    public static final String TimeRegex7 = "\\b{TimeSuffixFull}\\s+(kl\\s+)?{BasicTime}((\\s*{DescRegex})|\\b)"
            .replace("{TimeSuffixFull}", TimeSuffixFull)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex8 = ".^"
            .replace("{TimeSuffixFull}", TimeSuffixFull)
            .replace("{BasicTime}", BasicTime)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex9 = "\\b{PeriodHourNumRegex}(\\s+|-){FivesRegex}((\\s*{DescRegex})|\\b)"
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{FivesRegex}", FivesRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex10 = "\\b({TimePrefix}\\s+)?{BaseDateTime.HourRegex}(\\s*h|t\\s*){BaseDateTime.MinuteRegex}(\\s*{DescRegex})?"
            .replace("{TimePrefix}", TimePrefix)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{BaseDateTime.MinuteRegex}", BaseDateTime.MinuteRegex)
            .replace("{DescRegex}", DescRegex);

    public static final String TimeRegex11 = "\\b((?:({TimeTokenPrefix})?{TimeRegexWithDotConnector}(\\s*{DescRegex}))|(?:(?:{TimeTokenPrefix}{TimeRegexWithDotConnector})(?!\\s*procent|%)))"
            .replace("{TimeTokenPrefix}", TimeTokenPrefix)
            .replace("{TimeRegexWithDotConnector}", TimeRegexWithDotConnector)
            .replace("{DescRegex}", DescRegex);

    public static final String FirstTimeRegexInTimeRange = "\\b{TimeRegexWithDotConnector}(\\s*{DescRegex})?"
            .replace("{TimeRegexWithDotConnector}", TimeRegexWithDotConnector)
            .replace("{DescRegex}", DescRegex);

    public static final String PureNumFromTo = "({RangePrefixRegex}\\s+)?({HourRegex}|{PeriodHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*{TillRegex}\\s*({HourRegex}|{PeriodHourNumRegex})(?<rightDesc>\\s*({PmRegex}|{AmRegex}|{DescRegex}))?"
            .replace("{HourRegex}", HourRegex)
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex)
            .replace("{RangePrefixRegex}", RangePrefixRegex);

    public static final String PureNumBetweenAnd = "(mellan\\s+)(({BaseDateTime.TwoDigitHourRegex}{BaseDateTime.TwoDigitMinuteRegex})|{HourRegex}|{PeriodHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?\\s*{RangeConnectorRegex}\\s*(({BaseDateTime.TwoDigitHourRegex}{BaseDateTime.TwoDigitMinuteRegex})|{HourRegex}|{PeriodHourNumRegex})(?<rightDesc>\\s*({PmRegex}|{AmRegex}|{DescRegex}))?"
            .replace("{HourRegex}", HourRegex)
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{BaseDateTime.TwoDigitHourRegex}", BaseDateTime.TwoDigitHourRegex)
            .replace("{BaseDateTime.TwoDigitMinuteRegex}", BaseDateTime.TwoDigitMinuteRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex)
            .replace("{RangeConnectorRegex}", RangeConnectorRegex);

    public static final String SpecificTimeFromTo = "({RangePrefixRegex}\\s+)?(?<time1>(({TimeRegex2}|{FirstTimeRegexInTimeRange})|({HourRegex}|{PeriodHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?))\\s*{TillRegex}\\s*(?<time2>(({TimeRegex2}|{TimeRegexWithDotConnector}(?<rightDesc>\\s*{DescRegex}))|({HourRegex}|{PeriodHourNumRegex})(\\s*(?<rightDesc>{DescRegex}))?))"
            .replace("{TimeRegex2}", TimeRegex2)
            .replace("{FirstTimeRegexInTimeRange}", FirstTimeRegexInTimeRange)
            .replace("{TimeRegexWithDotConnector}", TimeRegexWithDotConnector)
            .replace("{TillRegex}", TillRegex)
            .replace("{HourRegex}", HourRegex)
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex)
            .replace("{RangePrefixRegex}", RangePrefixRegex);

    public static final String SpecificTimeBetweenAnd = "(mellan\\s+)(?<time1>(({TimeRegex2}|{FirstTimeRegexInTimeRange})|({HourRegex}|{PeriodHourNumRegex})(\\s*(?<leftDesc>{DescRegex}))?))\\s*{RangeConnectorRegex}\\s*(?<time2>(({TimeRegex2}|{TimeRegexWithDotConnector}(?<rightDesc>\\s*{DescRegex}))|({HourRegex}|{PeriodHourNumRegex})(\\s*(?<rightDesc>{DescRegex}))?))"
            .replace("{TimeRegex2}", TimeRegex2)
            .replace("{FirstTimeRegexInTimeRange}", FirstTimeRegexInTimeRange)
            .replace("{TimeRegexWithDotConnector}", TimeRegexWithDotConnector)
            .replace("{RangeConnectorRegex}", RangeConnectorRegex)
            .replace("{HourRegex}", HourRegex)
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{DescRegex}", DescRegex)
            .replace("{PmRegex}", PmRegex)
            .replace("{AmRegex}", AmRegex);

    public static final String SuffixAfterRegex = "\\b(((kl)\\s)?(eller|och)\\s+(över|efter|senare|större)(?!\\s+än))\\b";

    public static final String PrepositionRegex = "(?<prep>^(,\\s*)?(kl|på)(\\s+den)?$)";

    public static final String LaterEarlyRegex = "((?<early>tidig(are)(\\s+|-))|(?<late>efte(r?\\s+|-)))";

    public static final String MealTimeRegex = "\\b(at\\s+)?(?<mealTime>breakfast|brunch|lunch(\\s*tid)?|middags(\\s*tid)?|kvällsmat)\\b";

    public static final String UnspecificTimePeriodRegex = "({MealTimeRegex})"
            .replace("{MealTimeRegex}", MealTimeRegex);

    public static final String TimeOfDayRegex = "\\b(?<timeOfDay>((((in\\s+the\\s+)?{LaterEarlyRegex}?(in(\\s+the)?\\s+)?(morgon(en)?|eftermiddag(en)?|natt(en)?|kväll(en)?)))|{MealTimeRegex}|(((in\\s+(the)?\\s+)?)(dagtid|kontorstid)))s?)\\b"
            .replace("{LaterEarlyRegex}", LaterEarlyRegex)
            .replace("{MealTimeRegex}", MealTimeRegex);

    public static final String SpecificTimeOfDayRegex = "\\b(({StrictRelativeRegex}\\s+{TimeOfDayRegex})\\b|\\bikväll)s?\\b"
            .replace("{TimeOfDayRegex}", TimeOfDayRegex)
            .replace("{StrictRelativeRegex}", StrictRelativeRegex);

    public static final String TimeFollowedUnit = "^\\s*{TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final String TimeNumberCombinedWithUnit = "\\b(?<num>\\d+(\\.\\d*)?){TimeUnitRegex}"
            .replace("{TimeUnitRegex}", TimeUnitRegex);

    public static final List<String> BusinessHourSplitStrings = Arrays.asList("arbets", "tid");

    public static final String NowRegex = "\\b(?<now>(just\\s+)?nu|så\\s+snart\\s+som\\s+möjligt|asap|nyligen|tidigare|i\\s+(present|denna\\s+stund|denna\\s+minut|detta\\s+(ögonblick|present\\s+time)))\\b";

    public static final String NowParseRegex = "\\b({NowRegex}|^(date)$)\\b"
            .replace("{NowRegex}", NowRegex);

    public static final String SuffixRegex = "^\\s*(på\\s+)?(morgonen|eftermiddagen|kvällen|natten)\\b";

    public static final String NonTimeContextTokens = "(building)";

    public static final String DateTimeTimeOfDayRegex = "\\b(?<timeOfDay>morning|(?<pm>eftermiddag(en)?|natt(en)?|kväll(en)?))\\b";

    public static final String DateTimeSpecificTimeOfDayRegex = "\\b(({RelativeRegex}\\s+{DateTimeTimeOfDayRegex})\\b|\\bikväll)\\b"
            .replace("{DateTimeTimeOfDayRegex}", DateTimeTimeOfDayRegex)
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String TimeOfTodayAfterRegex = "^\\s*(,\\s*)?(på\\s+)?{DateTimeSpecificTimeOfDayRegex}"
            .replace("{DateTimeSpecificTimeOfDayRegex}", DateTimeSpecificTimeOfDayRegex);

    public static final String TimeOfTodayBeforeRegex = "{DateTimeSpecificTimeOfDayRegex}(\\s*,)?(\\s+(på|runt|omkring|vid))?\\s*$"
            .replace("{DateTimeSpecificTimeOfDayRegex}", DateTimeSpecificTimeOfDayRegex);

    public static final String SimpleTimeOfTodayAfterRegex = "(?<!{NonTimeContextTokens}\\s*)\\b({HourNumRegex}|{BaseDateTime.HourRegex})\\s*(,\\s*)?((på|den)\\s+)?{DateTimeSpecificTimeOfDayRegex}\\b"
            .replace("{NonTimeContextTokens}", NonTimeContextTokens)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{DateTimeSpecificTimeOfDayRegex}", DateTimeSpecificTimeOfDayRegex);

    public static final String SimpleTimeOfTodayBeforeRegex = "\\b{DateTimeSpecificTimeOfDayRegex}(\\s*,)?(\\s+(på|runt|omkring|vid))?\\s*({HourNumRegex}|{BaseDateTime.HourRegex})\\b"
            .replace("{DateTimeSpecificTimeOfDayRegex}", DateTimeSpecificTimeOfDayRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String SpecificEndOfRegex = "(the\\s+)?slutet av\\s*$";

    public static final String UnspecificEndOfRegex = "\\b(the\\s+)?(eod|(slutet\\s+(av|på)\\s+dagen))\\b";

    public static final String UnspecificEndOfRangeRegex = "\\b(eoy)\\b";

    public static final String PeriodTimeOfDayRegex = "\\b((in\\s+(the)?\\s+)?{LaterEarlyRegex}?(this\\s+)?{DateTimeTimeOfDayRegex})\\b"
            .replace("{DateTimeTimeOfDayRegex}", DateTimeTimeOfDayRegex)
            .replace("{LaterEarlyRegex}", LaterEarlyRegex);

    public static final String PeriodSpecificTimeOfDayRegex = "\\b({LaterEarlyRegex}?denna\\s+{DateTimeTimeOfDayRegex}|({StrictRelativeRegex}\\s+{PeriodTimeOfDayRegex})\\b|\\bikväll)\\b"
            .replace("{PeriodTimeOfDayRegex}", PeriodTimeOfDayRegex)
            .replace("{StrictRelativeRegex}", StrictRelativeRegex)
            .replace("{DateTimeTimeOfDayRegex}", DateTimeTimeOfDayRegex)
            .replace("{LaterEarlyRegex}", LaterEarlyRegex);

    public static final String PeriodTimeOfDayWithDateRegex = "\\b(({PeriodTimeOfDayRegex}(\\s+(den))?))\\b"
            .replace("{PeriodTimeOfDayRegex}", PeriodTimeOfDayRegex);

    public static final String LessThanRegex = "\\b(mindre\\s+än)\\b";

    public static final String MoreThanRegex = "\\b(mer\\s+än)\\b";

    public static final String DurationUnitRegex = "(?<unit>{DateUnitRegex}|tim(me|mar|mars)?|h|min(ut(er)?)?|sek(und(er)?)?|nätter)\\b"
            .replace("{DateUnitRegex}", DateUnitRegex);

    public static final String SuffixAndRegex = "(?<suffix>\\s*(och)\\s+(en?\\s+)?(?<suffix_num>halv|kvart))";

    public static final String PeriodicRegex = "\\b(?<periodic>((?<multiplier>semi|varannan|tri)(\\s*|-))?(dagligen|månatligen|veckovis|kvartalsvis|årlig(en)?))\\b";

    public static final String EachUnitRegex = "\\b(?<each>(varje|(varje|var|en gång\\s+(i|per|varje|var)?)\\s?)(?<other>\\s+(annan|alternate|second))?\\s*({DurationUnitRegex}|(?<specialUnit>kvartal|weekends?|veckoslut|helg)|{WeekDayRegex})|(?<specialUnit>weekends))"
            .replace("{DurationUnitRegex}", DurationUnitRegex)
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String EachPrefixRegex = "\\b(?<each>(varje|var|en gång\\s+(i|per|varje|var)?)\\s*$)";

    public static final String SetEachRegex = "\\b(?<each>(varje|var)(?<other>\\s+(annan|alternate))?\\s*)(?!den|det)\\b";

    public static final String SetLastRegex = "(?<last>följande|nästa|kommande|den\\s+här|{LastNegPrefix}senaste|förra|tidigare|nuvarande)"
            .replace("{LastNegPrefix}", LastNegPrefix);

    public static final String EachDayRegex = "^\\s*(var|varje)\\s*dag\\b";

    public static final String DurationFollowedUnit = "(^\\s*{DurationUnitRegex}\\s+{SuffixAndRegex})|(^\\s*{SuffixAndRegex}?(\\s+|-)?{DurationUnitRegex})"
            .replace("{SuffixAndRegex}", SuffixAndRegex)
            .replace("{DurationUnitRegex}", DurationUnitRegex);

    public static final String NumberCombinedWithDurationUnit = "\\b(?<num>\\d+(\\.\\d*)?)(-)?{DurationUnitRegex}"
            .replace("{DurationUnitRegex}", DurationUnitRegex);

    public static final String AnUnitRegex = "(\\b((?<half>(en)\\s+)?halv|another)|(?<half>(1/2|½|en halv)))\\s+{DurationUnitRegex}"
            .replace("{DurationUnitRegex}", DurationUnitRegex);

    public static final String DuringRegex = "\\b(under|i)\\s+(?<unit>år(et)?|månad(en)?|veckan?|dag(en)?)\\b";

    public static final String AllRegex = "\\b(?<all>(hela)(\\s+|-)(?<unit>år(et)?|månad(en)?|veckan?|dag(en)?))\\b";

    public static final String HalfRegex = "((e(n|tt)\\s*)|\\b)(?<half>halvt?\\s+(?<unit>år|månad|vecka|dag|timm(e|a)))\\b";

    public static final String ConjunctionRegex = "\\b((och(\\s+under)?)|med)\\b";

    public static final String HolidayList1 = "(?<holiday>första maj|nyårsdagen|nyårsafton|trettondedag(en|\\s+jul)|julafton|juldagen|annandag\\s+jul|skärtorsdag(en)?|långfredag(en)?|påskafton|påskdagen|annandag\\s+påsk|mardi gras|(washington|mao)'s birthday|juneteenth|(jubilee|freedom)(\\s+day)|chinese new year|(new\\s+(years'|year\\s*'s|years?)\\s+eve)|(new\\s+(years'|year\\s*'s|years?)(\\s+day)?)|may\\s*day|yuan dan|christmas eve|(christmas|xmas)(\\s+day)?|black friday|yuandan|easter(\\s+(sunday|saturday|monday))?|clean monday|ash wednesday|palm sunday|maundy thursday|good friday|white\\s+(sunday|monday)|trinity sunday|pentecost|corpus christi|cyber monday)";

    public static final String HolidayList2 = "(?<holiday>(valborg(smässoafton)?|kristi himmelsfärdsdag|pingst(afton|dagen)|midsommar(afton|dagen)|allahelgonaafton|alla helgons dag|thanks\\s*giving|all saint's|white lover|s(?:ain)?t?(\\.)?\\s+(?:patrick|george)(?:')?(?:s)?|us independence|all hallow|all souls|guy fawkes|cinco de mayo|halloween|qingming|dragon boat|april fools|tomb\\s*sweeping)(\\s+day)?)";

    public static final String HolidayList3 = "(?<holiday>(nationaldagen|sveriges nationaldag|mlk|martin luther king( jr)?|canberra|ascension|columbus|tree( planting)?|arbor|labou?r|((international|int'?l)\\s+)?workers'?|mother'?s?|father'?s?|female|women('s)?|single|teacher'?s|youth|children|girls|lovers?|earth|inauguration|groundhog|valentine'?s|baptiste|bastille|veterans(?:')?|memorial|mid[ \\-]autumn|moon|spring|lantern)\\s+day)";

    public static final String HolidayList4 = "(?<holiday>ramad(h)?an|ram(a)?zan|ramathan|eid al(-|\\s+)adha|eid al(-|\\s+)azha|eidul(-|\\s+)azha|feast of the sacrifice|(islamic|arabic|hijri) new year|eid al(-|\\s+)fitr|festival of breaking the fast)";

    public static final String HolidayRegex = "\\b(({StrictRelativeRegex}\\s+({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4}))|(?<holidayWeekend>((the\\s+)?weekend\\s+of\\s+)({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4})(\\s+((of\\s+)?({YearRegex}|{RelativeRegex}\\s+year)))?)|(({HolidayList1}|{HolidayList2}|{HolidayList3}|{HolidayList4})((?<holidayWeekend>(\\s+weekend)(\\s+((of\\s+)?({YearRegex}|{RelativeRegex}\\s+year)))?)|(\\s+(of\\s+)?({YearRegex}|{RelativeRegex}\\s+year)(?<holidayWeekend>\\s+weekend)?))?))\\b"
            .replace("{HolidayList1}", HolidayList1)
            .replace("{HolidayList2}", HolidayList2)
            .replace("{HolidayList3}", HolidayList3)
            .replace("{HolidayList4}", HolidayList4)
            .replace("{YearRegex}", YearRegex)
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{StrictRelativeRegex}", StrictRelativeRegex);

    public static final String AMTimeRegex = "(?<am>morgon(en)?|förmiddag(en)?)";

    public static final String PMTimeRegex = "\\b(?<pm>eftermiddag(en)?|kväll(en)?|natt(en)?)\\b";

    public static final String NightTimeRegex = "(natten)";

    public static final String NowTimeRegex = "(nu|vid\\s+(denna tidpunkt|denna\\s+minut|(ögonblick(et)?|(aktuell|nuvarande)\\s+tidpunkt)))";

    public static final String RecentlyTimeRegex = "(senaste|tidigare)";

    public static final String AsapTimeRegex = "(så\\s+snart\\s+(som|(som)?det\\s+är)\\s+möjligt|asap|snarast)";

    public static final String InclusiveModPrepositions = "(?<include>((den|kl|vid)\\s+eller\\s+)|(\\s+eller\\s+(den|kl|vid)))";

    public static final String AroundRegex = "(?:\\b(?:runt|cirka|omkring)\\s*?\\b)(\\s+den)?";

    public static final String BeforeRegex = "((\\b{InclusiveModPrepositions}?(?:före|innan|(ej\\s+senare\\s+än|tidigare)\\s+än|slutar\\s+(med|den)|by|tom|till|(?<include>så\\s+sent\\s+som)){InclusiveModPrepositions}?\\b\\s*?)|(?<!\\w|>)((?<include><\\s*=)|<))(\\s+den)?"
            .replace("{InclusiveModPrepositions}", InclusiveModPrepositions);

    public static final String AfterRegex = "((\\b{InclusiveModPrepositions}?((efter|(\\s+med)?(start|början)(?!\\sfrån)|(?<!ej\\s+)senare än)|(år större än))(?!\\s+lika med){InclusiveModPrepositions}?\\b\\s*?)|(?<!\\w|<)((?<include>>\\s*=)|>))(\\s+den)?"
            .replace("{InclusiveModPrepositions}", InclusiveModPrepositions);

    public static final String SinceRegex = "(?:(?:\\b(?:sedan|senare\\s+än\\s+eller\\s+lika\\s+med|((med|som)\\s+börja(n|r)|(som)?\\s+startar)\\s+(?:från|den|med)|så\\s+tidigt\\s+som|(any\\s+time\\s+)from)\\b\\s*?)|(?<!\\w|<)(>=))(\\s+den)?";

    public static final String SinceRegexExp = "({SinceRegex}|\\bfrån(\\s+den)?\\b)"
            .replace("{SinceRegex}", SinceRegex);

    public static final String AgoRegex = "\\b(sedan|tidigare|före\\s+(?<day>igår|idag))\\b";

    public static final String LaterRegex = "\\b(?:senare(?!((\\s+under)?\\s*{OneWordPeriodRegex})|(\\s+{TimeOfDayRegex})|\\s+än\\b)|från nu|(från|efter)\\s+(?<day>imorgon|idag))\\b"
            .replace("{OneWordPeriodRegex}", OneWordPeriodRegex)
            .replace("{TimeOfDayRegex}", TimeOfDayRegex);

    public static final String BeforeAfterRegex = "\\b((?<before>före)|(?<after>från|efter))\\b";

    public static final String ModPrefixRegex = "\\b({RelativeRegex}|{AroundRegex}|{BeforeRegex}|{AfterRegex}|{SinceRegex})\\b"
            .replace("{RelativeRegex}", RelativeRegex)
            .replace("{AroundRegex}", AroundRegex)
            .replace("{BeforeRegex}", BeforeRegex)
            .replace("{AfterRegex}", AfterRegex)
            .replace("{SinceRegex}", SinceRegex);

    public static final String ModSuffixRegex = "\\b({AgoRegex}|{LaterRegex}|{BeforeAfterRegex}|{FutureSuffixRegex}|{PastSuffixRegex})\\b"
            .replace("{AgoRegex}", AgoRegex)
            .replace("{LaterRegex}", LaterRegex)
            .replace("{BeforeAfterRegex}", BeforeAfterRegex)
            .replace("{FutureSuffixRegex}", FutureSuffixRegex)
            .replace("{PastSuffixRegex}", PastSuffixRegex);

    public static final String InConnectorRegex = "\\b(om)\\b";

    public static final String SinceYearSuffixRegex = "(^\\s*{SinceRegex}(\\s*år(et)?\\s*)?{YearSuffix})"
            .replace("{SinceRegex}", SinceRegex)
            .replace("{YearSuffix}", YearSuffix);

    public static final String WithinNextPrefixRegex = "\\b(inom(\\s+de(n|t))?(\\s+(?<next>{NextPrefixRegex}))?)\\b"
            .replace("{NextPrefixRegex}", NextPrefixRegex);

    public static final String TodayNowRegex = "\\b(idag|nu|nuvarande (datum|tid))\\b";

    public static final String MorningStartEndRegex = "(^(morgon|{AmDescRegex}))|((morgon|{AmDescRegex})$)"
            .replace("{AmDescRegex}", AmDescRegex);

    public static final String AfternoonStartEndRegex = "(^(afternoon|{PmDescRegex}))|((afternoon|{PmDescRegex})$)"
            .replace("{PmDescRegex}", PmDescRegex);

    public static final String EveningStartEndRegex = "(^(evening))|((evening)$)";

    public static final String NightStartEndRegex = "(^(over|to)?ni(ght|te))|((over|to)?ni(ght|te)$)";

    public static final String InexactNumberRegex = "\\b((för\\s+)?några|flera|(?<NumTwoTerm>(ett\\s+)?(par|antal)))\\b";

    public static final String InexactNumberUnitRegex = "({InexactNumberRegex})\\s+({DurationUnitRegex})"
            .replace("{InexactNumberRegex}", InexactNumberRegex)
            .replace("{DurationUnitRegex}", DurationUnitRegex);

    public static final String RelativeTimeUnitRegex = "(?:(?:(?:{NextPrefixRegex}|{PreviousPrefixRegex}|{ThisPrefixRegex})\\s+({TimeUnitRegex}))|((the|my))\\s+({RestrictedTimeUnitRegex}))"
            .replace("{NextPrefixRegex}", NextPrefixRegex)
            .replace("{PreviousPrefixRegex}", PreviousPrefixRegex)
            .replace("{ThisPrefixRegex}", ThisPrefixRegex)
            .replace("{TimeUnitRegex}", TimeUnitRegex)
            .replace("{RestrictedTimeUnitRegex}", RestrictedTimeUnitRegex);

    public static final String RelativeDurationUnitRegex = "(?:(?:(?<=({NextPrefixRegex}|{PreviousPrefixRegex}|{ThisPrefixRegex})\\s+)({DurationUnitRegex}))|((the|my))\\s+({RestrictedTimeUnitRegex}))"
            .replace("{NextPrefixRegex}", NextPrefixRegex)
            .replace("{PreviousPrefixRegex}", PreviousPrefixRegex)
            .replace("{ThisPrefixRegex}", ThisPrefixRegex)
            .replace("{DurationUnitRegex}", DurationUnitRegex)
            .replace("{RestrictedTimeUnitRegex}", RestrictedTimeUnitRegex);

    public static final String ReferenceDatePeriodRegex = "\\b{ReferencePrefixRegex}\\s+(?<duration>week(end)?|fortnight|month|year|decade)\\b"
            .replace("{ReferencePrefixRegex}", ReferencePrefixRegex);

    public static final String ConnectorRegex = "^(-|,|for|t|runt|cirka|@)$";

    public static final String FromToRegex = "(\\b(från).+(till|och|eller)\\b.+)";

    public static final String SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";

    public static final String SingleAmbiguousTermsRegex = "^(the\\s+)?(dag|vecka|månad|år)$";

    public static final String UnspecificDatePeriodRegex = "^(vecka|fortnight|månad|år)$";

    public static final String PrepositionSuffixRegex = "\\b(on|in|at|around|circa|from|to)$";

    public static final String FlexibleDayRegex = "(?<DayOfMonth>([A-Öa-ö]+\\s)?[A-Öa-ö\\d]+)";

    public static final String ForTheRegex = "\\b((((?<=\\btill\\s+)den\\s+{FlexibleDayRegex})|((?<!{WeekDayRegex}\\s+)den\\s+{FlexibleDayRegex}(?<=(ta|te|ra|re|de))))(?<end>\\s*(,|\\.(?!\\d)|!|\\?|$)))"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{FlexibleDayRegex}", FlexibleDayRegex);

    public static final String WeekDayAndDayOfMonthRegex = "\\b{WeekDayRegex}\\s+(den\\s+{FlexibleDayRegex})\\b"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{FlexibleDayRegex}", FlexibleDayRegex);

    public static final String WeekDayAndDayRegex = "\\b{WeekDayRegex}\\s+(?!(den)){DayRegex}(?!([-:]|(\\s+({AmDescRegex}|{PmDescRegex}|{OclockRegex}))))\\b"
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{DayRegex}", DayRegex)
            .replace("{AmDescRegex}", AmDescRegex)
            .replace("{PmDescRegex}", PmDescRegex)
            .replace("{OclockRegex}", OclockRegex);

    public static final String RestOfDateRegex = "\\b(rest|remaining)\\s+(of\\s+)?((the|my|this|current)\\s+)?(?<duration>vecka|fortnight|månad|år|decennium)\\b";

    public static final String RestOfDateTimeRegex = "\\b(rest|remaining)\\s+(av\\s+)?((den|min|denna|nuvarande)\\s+)?(?<unit>dag)\\b";

    public static final String AmbiguousRangeModifierPrefix = "(från)";

    public static final String NumberEndingPattern = "^(?:\\s+(?<meeting>möte|avtalad tid|konferens|sammanträde|((skype|teams|zoom|facetime)\\s+)?samtal)\\s+till\\s+(?<newTime>{PeriodHourNumRegex}|{HourRegex})([\\.]?$|(\\.,|,|!|\\?)))"
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{HourRegex}", HourRegex);

    public static final String OneOnOneRegex = "\\b(1\\s*:\\s*1(?!\\d))|(one (on )?one|one\\s*-\\s*one|one\\s*:\\s*one)\\b";

    public static final String LaterEarlyPeriodRegex = "\\b(({PrefixPeriodRegex})\\s*\\b\\s*(?<suffix>{OneWordPeriodRegex}|(?<FourDigitYear>{BaseDateTime.FourDigitYearRegex}))|({UnspecificEndOfRangeRegex}))\\b"
            .replace("{PrefixPeriodRegex}", PrefixPeriodRegex)
            .replace("{OneWordPeriodRegex}", OneWordPeriodRegex)
            .replace("{BaseDateTime.FourDigitYearRegex}", BaseDateTime.FourDigitYearRegex)
            .replace("{UnspecificEndOfRangeRegex}", UnspecificEndOfRangeRegex);

    public static final String WeekWithWeekDayRangeRegex = "\\b((?<week>({NextPrefixRegex}|{PreviousPrefixRegex}|this)\\s+week)((\\s+mellan\\s+{WeekDayRegex}\\s+och\\s+{WeekDayRegex})|(\\s+från\\s+{WeekDayRegex}\\s+till\\s+{WeekDayRegex})))\\b"
            .replace("{NextPrefixRegex}", NextPrefixRegex)
            .replace("{PreviousPrefixRegex}", PreviousPrefixRegex)
            .replace("{WeekDayRegex}", WeekDayRegex);

    public static final String GeneralEndingRegex = "^\\s*((\\.,)|\\.|,|!|\\?)?\\s*$";

    public static final String MiddlePauseRegex = "\\s*(,)\\s*";

    public static final String DurationConnectorRegex = "^\\s*(?<connector>\\s+|och|,)\\s*$";

    public static final String PrefixArticleRegex = "\\bthe\\s+";

    public static final String OrRegex = "\\s*((\\b|,\\s*)(eller|och)\\b|,)\\s*";

    public static final String SpecialYearTermsRegex = "\\b((({SpecialYearPrefixes}\\s+)?year)|(cy|(?<special>fy|sy)))"
            .replace("{SpecialYearPrefixes}", SpecialYearPrefixes);

    public static final String YearPlusNumberRegex = "\\b({SpecialYearTermsRegex}\\s*((?<year>(\\d{2,4}))|{FullTextYearRegex}))\\b"
            .replace("{FullTextYearRegex}", FullTextYearRegex)
            .replace("{SpecialYearTermsRegex}", SpecialYearTermsRegex);

    public static final String NumberAsTimeRegex = "\\b({WrittenTimeRegex}|{PeriodHourNumRegex}|{BaseDateTime.HourRegex})\\b"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{PeriodHourNumRegex}", PeriodHourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex);

    public static final String TimeBeforeAfterRegex = "\\b(((?<=\\b(before|no later than|by|after)\\s+)({WrittenTimeRegex}|{HourNumRegex}|{BaseDateTime.HourRegex}|{MidTimeRegex}))|{MidTimeRegex})\\b"
            .replace("{WrittenTimeRegex}", WrittenTimeRegex)
            .replace("{HourNumRegex}", HourNumRegex)
            .replace("{BaseDateTime.HourRegex}", BaseDateTime.HourRegex)
            .replace("{MidTimeRegex}", MidTimeRegex);

    public static final String DateNumberConnectorRegex = "^\\s*(?<connector>\\s+at)\\s*$";

    public static final String DecadeRegex = "(?<decade>(?:nough|twen|thir|fou?r|fif|six|seven|eigh|nine)ties|two\\s+thousands)";

    public static final String DecadeWithCenturyRegex = "(the\\s+)?(((?<century>\\d|1\\d|2\\d)?(')?(?<decade>\\d0)(')?(\\s)?s\\b)|(({CenturyRegex}(\\s+|-)(and\\s+)?)?{DecadeRegex})|({CenturyRegex}(\\s+|-)(and\\s+)?(?<decade>tens|hundreds)))"
            .replace("{CenturyRegex}", CenturyRegex)
            .replace("{DecadeRegex}", DecadeRegex);

    public static final String RelativeDecadeRegex = "\\b((the\\s+)?{RelativeRegex}\\s+((?<number>[\\w,]+)\\s+)?decades?)\\b"
            .replace("{RelativeRegex}", RelativeRegex);

    public static final String YearPeriodRegex = "((((from|during|in)\\s+)?{YearRegex}\\s*({TillRegex})\\s*{YearRegex})|(((between)\\s+){YearRegex}\\s*({RangeConnectorRegex})\\s*{YearRegex}))"
            .replace("{YearRegex}", YearRegex)
            .replace("{TillRegex}", TillRegex)
            .replace("{RangeConnectorRegex}", RangeConnectorRegex);

    public static final String StrictTillRegex = "(?<till>\\b(to|(un)?till?|thru|through)\\b|{BaseDateTime.RangeConnectorSymbolRegex}(?!\\s*(h[1-2]|q[1-4])(?!(\\s+of|\\s*,\\s*))))"
            .replace("{BaseDateTime.RangeConnectorSymbolRegex}", BaseDateTime.RangeConnectorSymbolRegex);

    public static final String StrictRangeConnectorRegex = "(?<and>\\b(and|through|to)\\b|{BaseDateTime.RangeConnectorSymbolRegex}(?!\\s*(h[1-2]|q[1-4])(?!(\\s+of|\\s*,\\s*))))"
            .replace("{BaseDateTime.RangeConnectorSymbolRegex}", BaseDateTime.RangeConnectorSymbolRegex);

    public static final String StartMiddleEndRegex = "\\b((?<StartOf>((the\\s+)?(start|beginning)\\s+of\\s+)?)(?<MiddleOf>((the\\s+)?middle\\s+of\\s+)?)(?<EndOf>((the\\s+)?end\\s+of\\s+)?))";

    public static final String ComplexDatePeriodRegex = "(?:((from|during|in)\\s+)?{StartMiddleEndRegex}(?<start>.+)\\s*({StrictTillRegex})\\s*{StartMiddleEndRegex}(?<end>.+)|((between)\\s+){StartMiddleEndRegex}(?<start>.+)\\s*({StrictRangeConnectorRegex})\\s*{StartMiddleEndRegex}(?<end>.+))"
            .replace("{StrictTillRegex}", StrictTillRegex)
            .replace("{StrictRangeConnectorRegex}", StrictRangeConnectorRegex)
            .replace("{StartMiddleEndRegex}", StartMiddleEndRegex);

    public static final String FailFastRegex = "{BaseDateTime.DeltaMinuteRegex}|\\b(?:{BaseDateTime.BaseAmDescRegex}|{BaseDateTime.BasePmDescRegex})|{BaseDateTime.BaseAmPmDescRegex}|\\b(?:zero|{WrittenOneToNineRegex}|{WrittenElevenToNineteenRegex}|{WrittenTensRegex}|{WrittenMonthRegex}|{SeasonDescRegex}|{DecadeRegex}|centur(y|ies)|weekends?|quarters?|hal(f|ves)|yesterday|to(morrow|day|night)|tmr|noonish|\\d(-|——)?ish|((the\\s+\\w*)|\\d)(th|rd|nd|st)|(mid\\s*(-\\s*)?)?(night|morning|afternoon|day)s?|evenings?|noon|lunch(time)?|dinner(time)?|(day|night)time|overnight|dawn|dusk|sunset|hours?|hrs?|h|minutes?|mins?|seconds?|secs?|eo[dmy]|mardi[ -]?gras|birthday|eve|christmas|xmas|thanksgiving|halloween|yuandan|easter|yuan dan|april fools|cinco de mayo|all (hallow|souls)|guy fawkes|(st )?patrick|hundreds?|noughties|aughts|thousands?)\\b|{WeekDayRegex}|{SetWeekDayRegex}|{NowRegex}|{PeriodicRegex}|\\b({DateUnitRegex}|{ImplicitDayRegex})"
            .replace("{BaseDateTime.DeltaMinuteRegex}", BaseDateTime.DeltaMinuteRegex)
            .replace("{BaseDateTime.BaseAmDescRegex}", BaseDateTime.BaseAmDescRegex)
            .replace("{BaseDateTime.BasePmDescRegex}", BaseDateTime.BasePmDescRegex)
            .replace("{BaseDateTime.BaseAmPmDescRegex}", BaseDateTime.BaseAmPmDescRegex)
            .replace("{ImplicitDayRegex}", ImplicitDayRegex)
            .replace("{DateUnitRegex}", DateUnitRegex)
            .replace("{WeekDayRegex}", WeekDayRegex)
            .replace("{SetWeekDayRegex}", SetWeekDayRegex)
            .replace("{NowRegex}", NowRegex)
            .replace("{PeriodicRegex}", PeriodicRegex)
            .replace("{DecadeRegex}", DecadeRegex)
            .replace("{SeasonDescRegex}", SeasonDescRegex)
            .replace("{WrittenMonthRegex}", WrittenMonthRegex)
            .replace("{WrittenTensRegex}", WrittenTensRegex)
            .replace("{WrittenElevenToNineteenRegex}", WrittenElevenToNineteenRegex)
            .replace("{WrittenOneToNineRegex}", WrittenOneToNineRegex);

    public static final ImmutableMap<String, String> UnitMap = ImmutableMap.<String, String>builder()
        .put("decennium", "10Y")
        .put("decennier", "10Y")
        .put("decenniet", "10Y")
        .put("år", "Y")
        .put("års", "Y")
        .put("åren", "Y")
        .put("månad", "MON")
        .put("månader", "MOM")
        .put("månaders", "MOM")
        .put("kvartal", "3MON")
        .put("termin", "6MON")
        .put("terminer", "6MON")
        .put("vecka", "W")
        .put("veckor", "W")
        .put("veckors", "W")
        .put("helg", "WE")
        .put("helger", "WE")
        .put("veckoslut", "WE")
        .put("dag", "D")
        .put("dagar", "D")
        .put("dagars", "D")
        .put("arbetsdag", "D")
        .put("arbetsdagar", "D")
        .put("arbetsdagars", "D")
        .put("veckodag", "D")
        .put("veckodagar", "D")
        .put("veckodagars", "D")
        .put("natt", "D")
        .put("nätter", "D")
        .put("timme", "H")
        .put("timmar", "H")
        .put("timmars", "H")
        .put("tim", "H")
        .put("t", "H")
        .put("minut", "M")
        .put("minuter", "M")
        .put("m", "M")
        .put("sekund", "S")
        .put("sekunder", "S")
        .put("sek", "S")
        .put("s", "S")
        .put("decades", "10Y")
        .put("decade", "10Y")
        .put("years", "Y")
        .put("year", "Y")
        .put("months", "MON")
        .put("month", "MON")
        .put("quarters", "3MON")
        .put("quarter", "3MON")
        .put("semesters", "6MON")
        .put("semestres", "6MON")
        .put("semester", "6MON")
        .put("semestre", "6MON")
        .put("weeks", "W")
        .put("week", "W")
        .put("weekends", "WE")
        .put("weekend", "WE")
        .put("fortnights", "2W")
        .put("fortnight", "2W")
        .put("weekdays", "D")
        .put("weekday", "D")
        .put("days", "D")
        .put("day", "D")
        .put("nights", "D")
        .put("night", "D")
        .put("hours", "H")
        .put("hour", "H")
        .put("hrs", "H")
        .put("hr", "H")
        .put("h", "H")
        .put("minutes", "M")
        .put("minute", "M")
        .put("mins", "M")
        .put("min", "M")
        .put("seconds", "S")
        .put("second", "S")
        .put("secs", "S")
        .put("sec", "S")
        .build();

    public static final ImmutableMap<String, Long> UnitValueMap = ImmutableMap.<String, Long>builder()
        .put("decennier", 315360000L)
        .put("decennium", 315360000L)
        .put("år", 31536000L)
        .put("års", 31536000L)
        .put("månad", 2592000L)
        .put("månader", 2592000L)
        .put("månaders", 2592000L)
        .put("helg", 172800L)
        .put("helger", 172800L)
        .put("veckoslut", 172800L)
        .put("vecka", 604800L)
        .put("veckor", 604800L)
        .put("veckors", 604800L)
        .put("arbetsdag", 86400L)
        .put("arbetsdagar", 86400L)
        .put("arbetsdagars", 86400L)
        .put("dag", 86400L)
        .put("dagar", 86400L)
        .put("dagars", 86400L)
        .put("natt", 86400L)
        .put("nätter", 86400L)
        .put("timme", 3600L)
        .put("timmar", 3600L)
        .put("timmars", 3600L)
        .put("tim", 3600L)
        .put("t", 3600L)
        .put("minut", 60L)
        .put("minuter", 60L)
        .put("m", 60L)
        .put("sekund", 1L)
        .put("sekunder", 1L)
        .put("sek", 1L)
        .put("s", 1L)
        .put("decades", 315360000L)
        .put("decade", 315360000L)
        .put("years", 31536000L)
        .put("year", 31536000L)
        .put("months", 2592000L)
        .put("month", 2592000L)
        .put("fortnights", 1209600L)
        .put("fortnight", 1209600L)
        .put("weekends", 172800L)
        .put("weekend", 172800L)
        .put("weeks", 604800L)
        .put("week", 604800L)
        .put("days", 86400L)
        .put("day", 86400L)
        .put("nights", 86400L)
        .put("night", 86400L)
        .put("hours", 3600L)
        .put("hour", 3600L)
        .put("hrs", 3600L)
        .put("hr", 3600L)
        .put("h", 3600L)
        .put("minutes", 60L)
        .put("minute", 60L)
        .put("mins", 60L)
        .put("min", 60L)
        .put("seconds", 1L)
        .put("second", 1L)
        .put("secs", 1L)
        .put("sec", 1L)
        .build();

    public static final ImmutableMap<String, String> SpecialYearPrefixesMap = ImmutableMap.<String, String>builder()
        .put("skol", "SY")
        .put("räkenskaps", "FY")
        .put("fiscal", "FY")
        .put("school", "SY")
        .put("fy", "FY")
        .put("sy", "SY")
        .build();

    public static final ImmutableMap<String, String> SeasonMap = ImmutableMap.<String, String>builder()
        .put("vår", "SP")
        .put("sommar", "SU")
        .put("höst", "FA")
        .put("vinter", "WI")
        .put("spring", "SP")
        .put("summer", "SU")
        .put("fall", "FA")
        .put("autumn", "FA")
        .put("winter", "WI")
        .build();

    public static final ImmutableMap<String, Integer> SeasonValueMap = ImmutableMap.<String, Integer>builder()
        .put("SP", 3)
        .put("SU", 6)
        .put("FA", 9)
        .put("WI", 12)
        .build();

    public static final ImmutableMap<String, Integer> CardinalMap = ImmutableMap.<String, Integer>builder()
        .put("första", 1)
        .put("förste", 1)
        .put("andra", 2)
        .put("andre", 2)
        .put("tredje", 3)
        .put("fjärde", 4)
        .put("femte", 5)
        .put("sjätte", 6)
        .put("sjunde", 7)
        .put("åttonde", 8)
        .put("nionde", 9)
        .put("tionde", 10)
        .put("elfte", 11)
        .put("tolfte", 12)
        .put("first", 1)
        .put("1st", 1)
        .put("second", 2)
        .put("2nd", 2)
        .put("third", 3)
        .put("3rd", 3)
        .put("fourth", 4)
        .put("4th", 4)
        .put("fifth", 5)
        .put("5th", 5)
        .put("sixth", 6)
        .put("6th", 6)
        .put("seventh", 7)
        .put("7th", 7)
        .put("eighth", 8)
        .put("8th", 8)
        .put("ninth", 9)
        .put("9th", 9)
        .put("tenth", 10)
        .put("10th", 10)
        .put("eleventh", 11)
        .put("11th", 11)
        .put("twelfth", 12)
        .put("12th", 12)
        .build();

    public static final ImmutableMap<String, Integer> DayOfWeek = ImmutableMap.<String, Integer>builder()
        .put("måndagen", 1)
        .put("måndag", 1)
        .put("månd", 1)
        .put("mån", 1)
        .put("må", 1)
        .put("tisdagen", 2)
        .put("tisdag", 2)
        .put("tisd", 2)
        .put("tis", 2)
        .put("ti", 2)
        .put("onsdagen", 3)
        .put("onsdag", 3)
        .put("onsd", 3)
        .put("ons", 3)
        .put("on", 3)
        .put("torsdagen", 4)
        .put("torsdag", 4)
        .put("torsd", 4)
        .put("tors", 4)
        .put("tor", 4)
        .put("to", 4)
        .put("fredagen", 5)
        .put("fredag", 5)
        .put("fred", 5)
        .put("fre", 5)
        .put("fr", 5)
        .put("lördagen", 6)
        .put("lördag", 6)
        .put("lörd", 6)
        .put("lör", 6)
        .put("lö", 6)
        .put("söndagen", 0)
        .put("söndag", 0)
        .put("sönd", 0)
        .put("sön", 0)
        .put("sö", 0)
        .put("monday", 1)
        .put("tuesday", 2)
        .put("wednesday", 3)
        .put("thursday", 4)
        .put("friday", 5)
        .put("saturday", 6)
        .put("sunday", 0)
        .put("mon", 1)
        .put("tue", 2)
        .put("tues", 2)
        .put("wed", 3)
        .put("wedn", 3)
        .put("weds", 3)
        .put("thu", 4)
        .put("thur", 4)
        .put("thurs", 4)
        .put("fri", 5)
        .put("sat", 6)
        .put("sun", 0)
        .build();

    public static final ImmutableMap<String, Integer> MonthOfYear = ImmutableMap.<String, Integer>builder()
        .put("januari", 1)
        .put("februari", 2)
        .put("mars", 3)
        .put("maj", 5)
        .put("juni", 6)
        .put("juli", 7)
        .put("augusti", 8)
        .put("oktober", 10)
        .put("january", 1)
        .put("february", 2)
        .put("march", 3)
        .put("april", 4)
        .put("may", 5)
        .put("june", 6)
        .put("july", 7)
        .put("august", 8)
        .put("september", 9)
        .put("october", 10)
        .put("november", 11)
        .put("december", 12)
        .put("jan", 1)
        .put("feb", 2)
        .put("mar", 3)
        .put("apr", 4)
        .put("jun", 6)
        .put("jul", 7)
        .put("aug", 8)
        .put("sep", 9)
        .put("sept", 9)
        .put("okt", 10)
        .put("oct", 10)
        .put("nov", 11)
        .put("dec", 12)
        .put("1", 1)
        .put("2", 2)
        .put("3", 3)
        .put("4", 4)
        .put("5", 5)
        .put("6", 6)
        .put("7", 7)
        .put("8", 8)
        .put("9", 9)
        .put("10", 10)
        .put("11", 11)
        .put("12", 12)
        .put("01", 1)
        .put("02", 2)
        .put("03", 3)
        .put("04", 4)
        .put("05", 5)
        .put("06", 6)
        .put("07", 7)
        .put("08", 8)
        .put("09", 9)
        .build();

    public static final ImmutableMap<String, Integer> Numbers = ImmutableMap.<String, Integer>builder()
        .put("noll", 0)
        .put("ett", 1)
        .put("en", 1)
        .put("två", 2)
        .put("tre", 3)
        .put("fyra", 4)
        .put("fem", 5)
        .put("sex", 6)
        .put("sju", 7)
        .put("åtta", 8)
        .put("nio", 9)
        .put("tio", 10)
        .put("elva", 11)
        .put("tolv", 12)
        .put("tretton", 13)
        .put("fjorton", 14)
        .put("femton", 15)
        .put("sexton", 16)
        .put("sjutton", 17)
        .put("arton", 18)
        .put("nitton", 19)
        .put("tjugo", 20)
        .put("tjugoett", 21)
        .put("tjugoen", 21)
        .put("tjugotvå", 22)
        .put("tjugofyra", 24)
        .put("tjugofem", 25)
        .put("tjugosex", 26)
        .put("tjugosju", 27)
        .put("tjugoåtta", 28)
        .put("tjugonio", 29)
        .put("trettio", 30)
        .put("trettioett", 31)
        .put("trettioen", 31)
        .put("trettiotvå", 32)
        .put("trettiotre", 33)
        .put("trettiofyra", 33)
        .put("trettiofem", 35)
        .put("trettiosex", 36)
        .put("trettiosju", 37)
        .put("trettioåtta", 38)
        .put("trettionio", 39)
        .put("fyrtio", 40)
        .put("fyrtioett", 41)
        .put("fyrtioen", 41)
        .put("fyrtiotvå", 42)
        .put("fyrtiotre", 43)
        .put("fyrtiofyra", 44)
        .put("fyrtiofem", 45)
        .put("fyrtiosex", 46)
        .put("fyrtiosju", 47)
        .put("fyrtioåtta", 48)
        .put("fyrtionio", 49)
        .put("femtio", 50)
        .put("femtioett", 51)
        .put("femtioen", 51)
        .put("femtiotvå", 52)
        .put("femtiotre", 53)
        .put("femtiofyra", 54)
        .put("femtiofem", 55)
        .put("femtiosex", 56)
        .put("femtiosju", 57)
        .put("femtioåtta", 58)
        .put("femtionio", 59)
        .put("sextio", 60)
        .put("sextioett", 61)
        .put("sextioen", 61)
        .put("sextiotvå", 62)
        .put("sextiotre", 63)
        .put("sextiofyra", 64)
        .put("sextiofem", 65)
        .put("sextiosex", 66)
        .put("sextiosju", 67)
        .put("sextioåtta", 68)
        .put("sextionio", 69)
        .put("sjuttio", 70)
        .put("sjuttioett", 71)
        .put("sjuttioen", 71)
        .put("sjuttiotvå", 72)
        .put("sjuttiotre", 73)
        .put("sjuttiofyra", 74)
        .put("sjuttiofem", 75)
        .put("sjuttiosex", 76)
        .put("sjuttiosju", 77)
        .put("sjuttioåtta", 78)
        .put("sjuttionio", 79)
        .put("åttio", 80)
        .put("åttioett", 81)
        .put("åttioen", 81)
        .put("åttiotvå", 82)
        .put("åttiotre", 83)
        .put("åttiofyra", 84)
        .put("åttiofem", 85)
        .put("åttiosex", 86)
        .put("åttiosju", 87)
        .put("åttioåtta", 88)
        .put("åttionio", 89)
        .put("nittio", 90)
        .put("nittioett", 91)
        .put("nittioen", 91)
        .put("nittiotvå", 92)
        .put("nittiotre", 93)
        .put("nittiofyra", 94)
        .put("nittiofem", 95)
        .put("nittiosex", 96)
        .put("nittiosju", 97)
        .put("nittioåtta", 98)
        .put("nittionio", 99)
        .put("etthundra", 100)
        .build();

    public static final ImmutableMap<String, Integer> DayOfMonth = ImmutableMap.<String, Integer>builder()
        .put("1:e", 1)
        .put("1:a", 1)
        .put("2:e", 2)
        .put("2:a", 2)
        .put("3:e", 3)
        .put("4:e", 4)
        .put("5:e", 5)
        .put("6:e", 6)
        .put("7:e", 7)
        .put("8:e", 8)
        .put("9:e", 9)
        .put("10:e", 10)
        .put("11:e", 11)
        .put("12:e", 12)
        .put("13:e", 13)
        .put("14:e", 14)
        .put("15:e", 15)
        .put("16:e", 16)
        .put("17:e", 17)
        .put("18:e", 18)
        .put("19:e", 19)
        .put("20:e", 20)
        .put("21:e", 21)
        .put("21:a", 21)
        .put("22:e", 22)
        .put("22:a", 22)
        .put("23:e", 23)
        .put("24:e", 24)
        .put("25:e", 25)
        .put("26:e", 26)
        .put("27:e", 27)
        .put("28:e", 28)
        .put("29:e", 29)
        .put("30:e", 30)
        .put("31:e", 31)
        .put("31:a", 31)
        .put("01:e", 1)
        .put("01:a", 1)
        .put("02:e", 2)
        .put("02:a", 2)
        .put("03:e", 3)
        .put("04:e", 4)
        .put("05:e", 5)
        .put("06:e", 6)
        .put("07:e", 7)
        .put("08:e", 8)
        .put("09:e", 9)
        .build();

    public static final ImmutableMap<String, Double> DoubleNumbers = ImmutableMap.<String, Double>builder()
        .put("half", 0.5D)
        .put("quarter", 0.25D)
        .build();

    public static final ImmutableMap<String, String[]> HolidayNames = ImmutableMap.<String, String[]>builder()
        .put("easterday", new String[]{"easterday", "easter", "eastersunday"})
        .put("ashwednesday", new String[]{"ashwednesday"})
        .put("palmsunday", new String[]{"palmsunday"})
        .put("maundythursday", new String[]{"maundythursday"})
        .put("goodfriday", new String[]{"goodfriday"})
        .put("eastersaturday", new String[]{"eastersaturday"})
        .put("eastermonday", new String[]{"eastermonday"})
        .put("ascensionday", new String[]{"ascensionday"})
        .put("whitesunday", new String[]{"whitesunday", "pentecost", "pentecostday"})
        .put("whitemonday", new String[]{"whitemonday"})
        .put("trinitysunday", new String[]{"trinitysunday"})
        .put("corpuschristi", new String[]{"corpuschristi"})
        .put("earthday", new String[]{"earthday"})
        .put("fathers", new String[]{"fatherday", "fathersday"})
        .put("mothers", new String[]{"motherday", "mothersday"})
        .put("thanksgiving", new String[]{"thanksgivingday", "thanksgiving"})
        .put("blackfriday", new String[]{"blackfriday"})
        .put("cybermonday", new String[]{"cybermonday"})
        .put("martinlutherking", new String[]{"mlkday", "martinlutherkingday", "martinlutherkingjrday"})
        .put("washingtonsbirthday", new String[]{"washingtonsbirthday", "washingtonbirthday", "presidentsday"})
        .put("canberra", new String[]{"canberraday"})
        .put("labour", new String[]{"labourday", "laborday"})
        .put("columbus", new String[]{"columbusday"})
        .put("memorial", new String[]{"memorialday"})
        .put("yuandan", new String[]{"yuandan"})
        .put("maosbirthday", new String[]{"maosbirthday"})
        .put("teachersday", new String[]{"teachersday", "teacherday"})
        .put("singleday", new String[]{"singleday"})
        .put("allsaintsday", new String[]{"allsaintsday"})
        .put("youthday", new String[]{"youthday"})
        .put("childrenday", new String[]{"childrenday", "childday"})
        .put("femaleday", new String[]{"femaleday"})
        .put("treeplantingday", new String[]{"treeplantingday"})
        .put("arborday", new String[]{"arborday"})
        .put("girlsday", new String[]{"girlsday"})
        .put("whiteloverday", new String[]{"whiteloverday"})
        .put("loverday", new String[]{"loverday", "loversday"})
        .put("christmas", new String[]{"christmasday", "christmas"})
        .put("xmas", new String[]{"xmasday", "xmas"})
        .put("newyear", new String[]{"newyear"})
        .put("newyearday", new String[]{"newyearday"})
        .put("newyearsday", new String[]{"newyearsday"})
        .put("inaugurationday", new String[]{"inaugurationday"})
        .put("groundhougday", new String[]{"groundhougday"})
        .put("valentinesday", new String[]{"valentinesday"})
        .put("stpatrickday", new String[]{"stpatrickday", "stpatricksday", "stpatrick"})
        .put("aprilfools", new String[]{"aprilfools"})
        .put("stgeorgeday", new String[]{"stgeorgeday"})
        .put("mayday", new String[]{"mayday", "intlworkersday", "internationalworkersday", "workersday"})
        .put("cincodemayoday", new String[]{"cincodemayoday"})
        .put("baptisteday", new String[]{"baptisteday"})
        .put("usindependenceday", new String[]{"usindependenceday"})
        .put("independenceday", new String[]{"independenceday"})
        .put("bastilleday", new String[]{"bastilleday"})
        .put("halloweenday", new String[]{"halloweenday", "halloween"})
        .put("allhallowday", new String[]{"allhallowday"})
        .put("allsoulsday", new String[]{"allsoulsday"})
        .put("guyfawkesday", new String[]{"guyfawkesday"})
        .put("veteransday", new String[]{"veteransday"})
        .put("christmaseve", new String[]{"christmaseve"})
        .put("newyeareve", new String[]{"newyearseve", "newyeareve"})
        .put("juneteenth", new String[]{"juneteenth", "freedomday", "jubileeday"})
        .put("ramadan", new String[]{"ramadan", "ramazan", "ramzan", "ramadhan", "ramathan"})
        .put("sacrifice", new String[]{"eidaladha", "eidalazha", "eidulazha", "feastofthesacrifice"})
        .put("islamicnewyear", new String[]{"islamicnewyear", "hijrinewyear", "arabicnewyear"})
        .put("eidalfitr", new String[]{"eidalfitr", "festivalofbreakingthefast"})
        .build();

    public static final ImmutableMap<String, Integer> WrittenDecades = ImmutableMap.<String, Integer>builder()
        .put("hundratalet", 0)
        .put("10-talet", 10)
        .put("10-tal", 10)
        .put("tiotalet", 10)
        .put("tiotal", 10)
        .put("20-talet", 20)
        .put("20-tal", 20)
        .put("tjugotalet", 20)
        .put("tjugotal", 20)
        .put("30-talet", 30)
        .put("30-tal", 30)
        .put("trettiotalet", 30)
        .put("trettiotal", 30)
        .put("40-talet", 40)
        .put("40-tal", 40)
        .put("fyrtiotalet", 40)
        .put("fyrtiotal", 40)
        .put("50-talet", 50)
        .put("50-tal", 50)
        .put("femtiotalet", 50)
        .put("femtiotal", 50)
        .put("60-talet", 60)
        .put("60-tal", 60)
        .put("sextiotalet", 60)
        .put("sextiotal", 60)
        .put("70-talet", 70)
        .put("70-tal", 70)
        .put("sjuttiotalet", 70)
        .put("sjuttiotal", 70)
        .put("80-talet", 80)
        .put("80-tal", 80)
        .put("åttiotalet", 80)
        .put("åttiotal", 80)
        .put("90-talet", 90)
        .put("90-tal", 90)
        .put("nittiotalet", 90)
        .put("nittiotal", 90)
        .build();

    public static final ImmutableMap<String, Integer> SpecialDecadeCases = ImmutableMap.<String, Integer>builder()
        .put("00-talet", 2000)
        .put("2000-talet", 2000)
        .put("2000-tal", 2000)
        .put("tvåtusentalet", 2000)
        .put("tvåtusental", 2000)
        .put("tjugohundratalet", 2000)
        .put("tjugohundratal", 2000)
        .build();

    public static final String DefaultLanguageFallback = "MDY";

    public static final List<String> SuperfluousWordList = Arrays.asList("preferably", "how about", "maybe", "perhaps", "say", "like");

    public static final List<String> DurationDateRestrictions = Arrays.asList("today", "now", "current date");

    public static final ImmutableMap<String, String> AmbiguityFiltersDict = ImmutableMap.<String, String>builder()
        .put("^\\d{4}$", "(\\d\\.\\d{4}|\\d{4}\\.\\d)")
        .put("^(morning|afternoon|evening|night|day)\\b", "\\b(good\\s+(morning|afternoon|evening|night|day))|(nighty\\s+night)\\b")
        .put("\\bnow\\b", "\\b(^now,)|\\b((is|are)\\s+now\\s+for|for\\s+now)\\b")
        .put("\\bmay$", "\\b((((!|\\.|\\?|,|;|)\\s+|^)may i)|(i|you|he|she|we|they)\\s+may|(may\\s+((((also|not|(also not)|well)\\s+)?(be|ask|contain|constitute|e-?mail|take|have|result|involve|get|work|reply|differ))|(or may not)))|(?<!(in|during|through)\\s+)may,? at (its|h(is|er)|y?our|my))\\b")
        .put("^(a|one) second$", "\\b(?<!an?\\s+)(a|one) second (round|time|wave|turn|chance|thought|opinion|cycle|take|meaning|life|job|home|hand|language|display|monitor|stimulus|dose|vaccination|shot|jab)\\b")
        .put("\\b(breakfast|brunch|lunch(time)?|dinner(time)?|supper)$", "(?<!\\b(at|before|after|around|circa)\\b\\s)(breakfast|brunch|lunch|dinner|supper)(?!\\s*time)")
        .put("^\\d+m$", "^\\d+m$")
        .put("^(apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sept?)$", "([$%£&!?@#])(apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sept?)|(apr|aug|dec|feb|jan|jul|jun|mar|may|nov|oct|sept?)([$%£&@#])")
        .put("^(to\\s+date)$", "\\b((equals?|up)\\s+to\\s+date)\\b")
        .build();

    public static final ImmutableMap<String, String> AmbiguityTimeFiltersDict = ImmutableMap.<String, String>builder()
        .put("^(\\p{L}+|\\d{1,2})(\\s+(morning|afternoon|evening|night))?$", "\\b(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|\\d{1,2})\\s+(morning|afternoon|evening|night)\\b")
        .build();

    public static final ImmutableMap<String, String> AmbiguityDurationFiltersDict = ImmutableMap.<String, String>builder()
        .put("night$", "\\bnight(\\s*|-)(club|light|market|shift|work(er)?)s?\\b")
        .build();

    public static final List<String> MorningTermList = Arrays.asList("morgon", "morgonen", "morning");

    public static final List<String> AfternoonTermList = Arrays.asList("afternoon", "eftermiddag", "eftermiddagen");

    public static final List<String> EveningTermList = Arrays.asList("evening", "kväll", "kvällen");

    public static final List<String> MealtimeBreakfastTermList = Arrays.asList("breakfast", "frukost", "frukosten");

    public static final List<String> MealtimeBrunchTermList = Arrays.asList("brunch", "brunchen");

    public static final List<String> MealtimeLunchTermList = Arrays.asList("lunch", "lunchtime", "lunchen");

    public static final List<String> MealtimeDinnerTermList = Arrays.asList("dinner", "dinnertime", "supper", "kvällsmat", "kvällsmaten");

    public static final List<String> DaytimeTermList = Arrays.asList("daytime", "dagtid");

    public static final List<String> NightTermList = Arrays.asList("night", "natt", "natten");

    public static final List<String> NighttimeTermList = Arrays.asList("nighttime", "night-time");

    public static final List<String> SameDayTerms = Arrays.asList("today", "current date", "otd", "idag", "i dag");

    public static final List<String> PlusOneDayTerms = Arrays.asList("tomorrow", "tmr", "day after", "imorgon", "i morgon");

    public static final List<String> MinusOneDayTerms = Arrays.asList("yesterday", "day before", "igår", "i går", "dagen innan", "dagen före", "dag innan", "dag före");

    public static final List<String> PlusTwoDayTerms = Arrays.asList("day after tomorrow", "day after tmr", "övermorgon", "i övermorgon");

    public static final List<String> MinusTwoDayTerms = Arrays.asList("day before yesterday", "förrgår", "i förrgår");

    public static final List<String> FutureTerms = Arrays.asList("this", "next", "kommande", "denna", "nästa");

    public static final List<String> LastCardinalTerms = Arrays.asList("last", "förra", "senaste");

    public static final List<String> MonthTerms = Arrays.asList("month", "månad");

    public static final List<String> MonthToDateTerms = Arrays.asList("month to date");

    public static final List<String> WeekendTerms = Arrays.asList("weekend", "helg", "veckoslut");

    public static final List<String> WeekTerms = Arrays.asList("week", "vecka");

    public static final List<String> FortnightTerms = Arrays.asList("fortnight", "fourtenight", "fjorton dagar");

    public static final List<String> YearTerms = Arrays.asList("year", "år");

    public static final List<String> GenericYearTerms = Arrays.asList("y");

    public static final List<String> YearToDateTerms = Arrays.asList("year to date");

    public static final String DoubleMultiplierRegex = "^(bi)(-|\\s)?";

    public static final String HalfMultiplierRegex = "^(semi)(-|\\s)?";

    public static final String DayTypeRegex = "((week)?da(il)?ys?)$";

    public static final String WeekTypeRegex = "(week(s|ly)?)$";

    public static final String WeekendTypeRegex = "(weekends?)$";

    public static final String MonthTypeRegex = "(month(s|ly)?)$";

    public static final String QuarterTypeRegex = "(quarter(s|ly)?)$";

    public static final String YearTypeRegex = "((years?|annual)(ly)?)$";
}
